import { faker } from "@faker-js/faker";
import { describe, expect } from "vitest";

import { createAuthContext } from "@tests/backend/utils/context";
import {
	insertAccount,
	insertAccountSettings,
	insertAccountWithSession,
	insertConnectedUsers,
	insertDebt,
	insertReceipt,
	insertReceiptParticipant,
	insertUser,
} from "@tests/backend/utils/data";
import {
	expectDatabaseDiffSnapshot,
	expectTRPCError,
	expectUnauthorizedError,
} from "@tests/backend/utils/expect";
import { test } from "@tests/backend/utils/test";
import { t } from "next-app/handlers/trpc";
import { UUID_REGEX } from "next-app/handlers/validation";

import { procedure } from "./add";
import {
	getValidDebt,
	verifyAmount,
	verifyCurrencyCode,
	verifyNote,
	verifyReceiptId,
	verifyTimestamp,
	verifyUserId,
} from "./utils.test";

const router = t.router({ procedure });

describe("debts.add", () => {
	describe("input verification", () => {
		expectUnauthorizedError((context) =>
			router.createCaller(context).procedure(getValidDebt()),
		);

		verifyAmount(
			(context, amount) =>
				router.createCaller(context).procedure({ ...getValidDebt(), amount }),
			"",
		);

		verifyNote(
			(context, note) =>
				router.createCaller(context).procedure({ ...getValidDebt(), note }),
			"",
		);

		verifyCurrencyCode(
			(context, currencyCode) =>
				router
					.createCaller(context)
					.procedure({ ...getValidDebt(), currencyCode }),
			"",
		);

		verifyTimestamp(
			(context, timestamp) =>
				router
					.createCaller(context)
					.procedure({ ...getValidDebt(), timestamp }),
			"",
		);

		verifyReceiptId(
			(context, receiptId) =>
				router
					.createCaller(context)
					.procedure({ ...getValidDebt(), receiptId }),
			"",
		);

		verifyUserId(
			(context, userId) =>
				router.createCaller(context).procedure(getValidDebt(userId)),
			"",
		);

		test("user does not exist", async ({ ctx }) => {
			const { sessionId } = await insertAccountWithSession(ctx);
			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			const fakeUserId = faker.string.uuid();
			await expectTRPCError(
				() => caller.procedure(getValidDebt(fakeUserId)),
				"NOT_FOUND",
				`User "${fakeUserId}" does not exist.`,
			);
		});

		test("user is not owned by an account", async ({ ctx }) => {
			const { sessionId, accountId, account } = await insertAccountWithSession(
				ctx,
			);
			await insertUser(ctx, accountId);

			const { id: foreignAccountId } = await insertAccount(ctx);
			const { id: foreignUserId } = await insertUser(ctx, foreignAccountId);

			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			await expectTRPCError(
				() => caller.procedure(getValidDebt(foreignUserId)),
				"FORBIDDEN",
				`User "${foreignUserId}" is not owned by "${account.email}".`,
			);
		});

		test("user is ourselves", async ({ ctx }) => {
			const { sessionId, userId } = await insertAccountWithSession(ctx);

			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			await expectTRPCError(
				() => caller.procedure(getValidDebt(userId)),
				"FORBIDDEN",
				`Cannot add a debt for yourself.`,
			);
		});

		test("there is a receipt id debt with that user", async ({ ctx }) => {
			const { sessionId, accountId } = await insertAccountWithSession(ctx);
			const { id: receiptId } = await insertReceipt(ctx, accountId);
			const { id: userId } = await insertUser(ctx, accountId);
			await insertReceiptParticipant(ctx, receiptId, userId);
			await insertDebt(ctx, accountId, userId, { receiptId });

			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			await expectTRPCError(
				() =>
					caller.procedure({
						...getValidDebt(userId),
						receiptId,
					}),
				"FORBIDDEN",
				`There is already a debt for user "${userId}" in receipt "${receiptId}".`,
			);
		});
	});

	describe("functionality", () => {
		test("debt is added - autogenerated timestamp", async ({ ctx }) => {
			const { sessionId, accountId } = await insertAccountWithSession(ctx);
			const { id: userId } = await insertUser(ctx, accountId);

			// Verify unrelated data doesn't affect the result
			await insertUser(ctx, accountId);
			await insertAccountSettings(ctx, accountId, { autoAcceptDebts: true });
			const { id: foreignAccountId } = await insertAccount(ctx);
			await insertUser(ctx, foreignAccountId);

			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			const result = await expectDatabaseDiffSnapshot(ctx, () =>
				caller.procedure(getValidDebt(userId)),
			);
			expect(result.id).toMatch(UUID_REGEX);
			expect(result).toStrictEqual<typeof result>({
				id: result.id,
				lockedTimestamp: new Date(),
				reverseAccepted: false,
			});
		});

		test("debt is added - user-provided timestamp", async ({ ctx }) => {
			const { sessionId, accountId } = await insertAccountWithSession(ctx);
			const { id: userId } = await insertUser(ctx, accountId);

			// Verify unrelated data doesn't affect the result
			await insertUser(ctx, accountId);
			await insertAccountSettings(ctx, accountId, { autoAcceptDebts: true });
			const { id: foreignAccountId } = await insertAccount(ctx);
			await insertUser(ctx, foreignAccountId);

			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			const result = await expectDatabaseDiffSnapshot(ctx, () =>
				caller.procedure({
					...getValidDebt(userId),
					timestamp: new Date("2021-01-01"),
				}),
			);
			expect(result.id).toMatch(UUID_REGEX);
			expect(result).toStrictEqual<typeof result>({
				id: result.id,
				lockedTimestamp: new Date(),
				reverseAccepted: false,
			});
		});

		describe("multiple debts", () => {
			test("some are auto-accepted by the counterparty", async ({ ctx }) => {
				const { sessionId, accountId } = await insertAccountWithSession(ctx);
				const { id: acceptingForeignAccountId } = await insertAccount(ctx, {
					settings: { autoAcceptDebts: true },
				});
				const { id: anotherAcceptingForeignAccountId } = await insertAccount(
					ctx,
					{ settings: { autoAcceptDebts: true } },
				);
				const { id: otherForeignAccountId } = await insertAccount(ctx);

				const [{ id: acceptingUserId }] = await insertConnectedUsers(ctx, [
					accountId,
					acceptingForeignAccountId,
				]);
				const [{ id: anotherAcceptingUserId }] = await insertConnectedUsers(
					ctx,
					[accountId, anotherAcceptingForeignAccountId],
				);
				const [{ id: otherUserId }] = await insertConnectedUsers(ctx, [
					accountId,
					otherForeignAccountId,
				]);
				const { id: receiptId } = await insertReceipt(ctx, accountId);

				// Verify unrelated data doesn't affect the result
				await insertUser(ctx, accountId);
				await insertAccountSettings(ctx, accountId, { autoAcceptDebts: true });
				await insertUser(ctx, acceptingForeignAccountId);
				await insertUser(ctx, anotherAcceptingForeignAccountId);

				const caller = router.createCaller(createAuthContext(ctx, sessionId));
				const results = await expectDatabaseDiffSnapshot(ctx, () =>
					Promise.all([
						caller.procedure({ ...getValidDebt(acceptingUserId), receiptId }),
						caller.procedure(getValidDebt(acceptingUserId)),
						caller.procedure(getValidDebt(anotherAcceptingUserId)),
						caller.procedure(getValidDebt(otherUserId)),
					]),
				);
				expect(results).toHaveLength(4);
				results
					.map(({ id }) => id)
					.every((id) => expect(id).toMatch(UUID_REGEX));
				expect(results).toStrictEqual<typeof results>(
					results.map(({ id }, index) => ({
						id,
						lockedTimestamp: new Date(),
						// see Promise.all - accepting users are 0, 1 and 2 indexes
						reverseAccepted: index <= 2,
					})) as typeof results,
				);
			});

			test("for the same auto-accepting account", async ({ ctx }) => {
				const { sessionId, accountId } = await insertAccountWithSession(ctx);
				const { id: acceptingForeignAccountId } = await insertAccount(ctx, {
					settings: { autoAcceptDebts: true },
				});

				const [{ id: acceptingUserId }] = await insertConnectedUsers(ctx, [
					accountId,
					acceptingForeignAccountId,
				]);

				// Verify unrelated data doesn't affect the result
				await insertUser(ctx, accountId);
				await insertAccountSettings(ctx, accountId, { autoAcceptDebts: true });
				await insertUser(ctx, acceptingForeignAccountId);

				const caller = router.createCaller(createAuthContext(ctx, sessionId));
				const results = await expectDatabaseDiffSnapshot(ctx, () =>
					Promise.all([
						caller.procedure(getValidDebt(acceptingUserId)),
						caller.procedure(getValidDebt(acceptingUserId)),
						caller.procedure(getValidDebt(acceptingUserId)),
					]),
				);
				expect(results).toHaveLength(3);
				results
					.map(({ id }) => id)
					.every((id) => expect(id).toMatch(UUID_REGEX));
				expect(results).toStrictEqual<typeof results>(
					results.map(({ id }) => ({
						id,
						lockedTimestamp: new Date(),
						// see Promise.all - all users are accepting
						reverseAccepted: true,
					})) as typeof results,
				);
			});

			test("some auto-accepting accounts already had debts picked by the same receipt id", async ({
				ctx,
			}) => {
				const { sessionId, accountId } = await insertAccountWithSession(ctx);
				const { id: acceptingForeignAccountId } = await insertAccount(ctx, {
					settings: { autoAcceptDebts: true },
				});

				const [{ id: acceptingUserId }, { id: selfUserId }] =
					await insertConnectedUsers(ctx, [
						accountId,
						acceptingForeignAccountId,
					]);

				const { id: receiptId } = await insertReceipt(
					ctx,
					acceptingForeignAccountId,
				);
				const { id: counterpartyId } = await insertDebt(
					ctx,
					acceptingForeignAccountId,
					selfUserId,
					{ receiptId },
				);

				// Verify unrelated data doesn't affect the result
				await insertUser(ctx, accountId);
				await insertAccountSettings(ctx, accountId, { autoAcceptDebts: true });
				await insertUser(ctx, acceptingForeignAccountId);

				const caller = router.createCaller(createAuthContext(ctx, sessionId));
				const results = await expectDatabaseDiffSnapshot(ctx, () =>
					Promise.all([
						caller.procedure({ ...getValidDebt(acceptingUserId), receiptId }),
						caller.procedure(getValidDebt(acceptingUserId)),
						caller.procedure(getValidDebt(acceptingUserId)),
					]),
				);
				expect(results).toHaveLength(3);
				results
					.map(({ id }) => id)
					.every((id) => expect(id).toMatch(UUID_REGEX));
				expect(results).toStrictEqual<typeof results>(
					results.map(({ id }) => ({
						id,
						lockedTimestamp: new Date(),
						// see Promise.all - all users are accepting
						reverseAccepted: true,
					})) as typeof results,
				);
				expect(results[0].id).toEqual(counterpartyId);
			});
		});

		describe("auto-accepted by the counterparty", () => {
			test("counterparty's debt didn't exist before", async ({ ctx }) => {
				const { sessionId, accountId } = await insertAccountWithSession(ctx);
				const { id: acceptingAccountId } = await insertAccount(ctx, {
					settings: { autoAcceptDebts: true },
				});
				const [{ id: acceptingUserId }] = await insertConnectedUsers(ctx, [
					accountId,
					acceptingAccountId,
				]);
				const { id: receiptId } = await insertReceipt(ctx, accountId);

				// Verify unrelated data doesn't affect the result
				await insertUser(ctx, accountId);
				await insertAccountSettings(ctx, accountId, { autoAcceptDebts: true });
				await insertUser(ctx, acceptingAccountId);

				const caller = router.createCaller(createAuthContext(ctx, sessionId));
				const result = await expectDatabaseDiffSnapshot(ctx, () =>
					caller.procedure({ ...getValidDebt(acceptingUserId), receiptId }),
				);
				expect(result.id).toMatch(UUID_REGEX);
				expect(result).toStrictEqual<typeof result>({
					id: result.id,
					lockedTimestamp: new Date(),
					reverseAccepted: true,
				});
			});

			test("counterparty's debt did exist before - picked by receipt id & owner account id", async ({
				ctx,
			}) => {
				const { sessionId, accountId } = await insertAccountWithSession(ctx);
				const { id: acceptingAccountId } = await insertAccount(ctx, {
					settings: { autoAcceptDebts: true },
				});
				const [{ id: acceptingUserId }, { id: acceptingSelfUserId }] =
					await insertConnectedUsers(ctx, [accountId, acceptingAccountId]);
				const { id: receiptId } = await insertReceipt(ctx, accountId);

				// Existing counter-debt
				const { id: counterpartyId } = await insertDebt(
					ctx,
					acceptingAccountId,
					acceptingSelfUserId,
					{ receiptId },
				);

				// Verify unrelated data doesn't affect the result
				await insertUser(ctx, accountId);
				await insertAccountSettings(ctx, accountId, { autoAcceptDebts: true });
				await insertUser(ctx, acceptingAccountId);

				const caller = router.createCaller(createAuthContext(ctx, sessionId));
				const result = await expectDatabaseDiffSnapshot(ctx, () =>
					caller.procedure({ ...getValidDebt(acceptingUserId), receiptId }),
				);
				expect(result.id).toMatch(UUID_REGEX);
				expect(result).toStrictEqual<typeof result>({
					id: result.id,
					lockedTimestamp: new Date(),
					reverseAccepted: true,
				});
				expect(result.id).toEqual(counterpartyId);
			});
		});
	});
});
