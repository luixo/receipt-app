import { faker } from "@faker-js/faker";
import { describe, expect } from "vitest";

import { createAuthContext } from "@tests/backend/utils/context";
import {
	insertAccount,
	insertAccountSettings,
	insertAccountWithSession,
	insertConnectedUsers,
	insertUser,
} from "@tests/backend/utils/data";
import {
	expectDatabaseDiffSnapshot,
	expectTRPCError,
	expectUnauthorizedError,
} from "@tests/backend/utils/expect";
import { test } from "@tests/backend/utils/test";
import { t } from "next-app/handlers/trpc";
import { UUID_REGEX } from "next-app/handlers/validation";

import { procedure } from "./add";
import {
	getValidDebt,
	verifyAmount,
	verifyCurrencyCode,
	verifyNote,
	verifyTimestamp,
	verifyUserId,
} from "./test.utils";

const router = t.router({ procedure });

describe("debts.add", () => {
	describe("input verification", () => {
		expectUnauthorizedError((context) =>
			router.createCaller(context).procedure(getValidDebt()),
		);

		verifyAmount(
			(context, amount) =>
				router.createCaller(context).procedure({ ...getValidDebt(), amount }),
			"",
		);

		verifyNote(
			(context, note) =>
				router.createCaller(context).procedure({ ...getValidDebt(), note }),
			"",
		);

		verifyCurrencyCode(
			(context, currencyCode) =>
				router
					.createCaller(context)
					.procedure({ ...getValidDebt(), currencyCode }),
			"",
		);

		verifyTimestamp(
			(context, timestamp) =>
				router
					.createCaller(context)
					.procedure({ ...getValidDebt(), timestamp }),
			"",
		);

		verifyUserId(
			(context, userId) =>
				router.createCaller(context).procedure(getValidDebt(userId)),
			"",
		);

		test("user does not exist", async ({ ctx }) => {
			const { sessionId } = await insertAccountWithSession(ctx);
			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			const fakeUserId = faker.string.uuid();
			await expectTRPCError(
				() => caller.procedure(getValidDebt(fakeUserId)),
				"NOT_FOUND",
				`User "${fakeUserId}" does not exist.`,
			);
		});

		test("user is not owned by an account", async ({ ctx }) => {
			const { sessionId, accountId, account } = await insertAccountWithSession(
				ctx,
			);
			await insertUser(ctx, accountId);

			const { id: foreignAccountId } = await insertAccount(ctx);
			const { id: foreignUserId } = await insertUser(ctx, foreignAccountId);

			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			await expectTRPCError(
				() => caller.procedure(getValidDebt(foreignUserId)),
				"FORBIDDEN",
				`User "${foreignUserId}" is not owned by "${account.email}".`,
			);
		});

		test("user is ourselves", async ({ ctx }) => {
			const { sessionId, userId } = await insertAccountWithSession(ctx);

			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			await expectTRPCError(
				() => caller.procedure(getValidDebt(userId)),
				"FORBIDDEN",
				`Cannot add a debt for yourself.`,
			);
		});
	});

	describe("functionality", () => {
		test("debt is added - autogenerated timestamp", async ({ ctx }) => {
			const { sessionId, accountId } = await insertAccountWithSession(ctx);
			const { id: userId } = await insertUser(ctx, accountId);

			// Verify unrelated data doesn't affect the result
			await insertUser(ctx, accountId);
			await insertAccountSettings(ctx, accountId, { autoAcceptDebts: true });
			const { id: foreignAccountId } = await insertAccount(ctx);
			await insertUser(ctx, foreignAccountId);

			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			const result = await expectDatabaseDiffSnapshot(ctx, () =>
				caller.procedure(getValidDebt(userId)),
			);
			expect(result.id).toMatch(UUID_REGEX);
			expect(result).toStrictEqual<typeof result>({
				id: result.id,
				lockedTimestamp: new Date(),
				reverseAccepted: false,
			});
		});

		test("debt is added - user-provided timestamp", async ({ ctx }) => {
			const { sessionId, accountId } = await insertAccountWithSession(ctx);
			const { id: userId } = await insertUser(ctx, accountId);

			// Verify unrelated data doesn't affect the result
			await insertUser(ctx, accountId);
			await insertAccountSettings(ctx, accountId, { autoAcceptDebts: true });
			const { id: foreignAccountId } = await insertAccount(ctx);
			await insertUser(ctx, foreignAccountId);

			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			const result = await expectDatabaseDiffSnapshot(ctx, () =>
				caller.procedure({
					...getValidDebt(userId),
					timestamp: new Date("2021-01-01"),
				}),
			);
			expect(result.id).toMatch(UUID_REGEX);
			expect(result).toStrictEqual<typeof result>({
				id: result.id,
				lockedTimestamp: new Date(),
				reverseAccepted: false,
			});
		});

		test("debt is added - auto-accepted by the counterparty", async ({
			ctx,
		}) => {
			const { sessionId, accountId } = await insertAccountWithSession(ctx);
			const { id: acceptingAccountId } = await insertAccount(ctx, {
				settings: { autoAcceptDebts: true },
			});
			const [{ id: acceptingUserId }] = await insertConnectedUsers(ctx, [
				accountId,
				acceptingAccountId,
			]);

			// Verify unrelated data doesn't affect the result
			await insertUser(ctx, accountId);
			await insertAccountSettings(ctx, accountId, { autoAcceptDebts: true });
			await insertUser(ctx, acceptingAccountId);

			const caller = router.createCaller(createAuthContext(ctx, sessionId));
			const result = await expectDatabaseDiffSnapshot(ctx, () =>
				caller.procedure(getValidDebt(acceptingUserId)),
			);
			expect(result.id).toMatch(UUID_REGEX);
			expect(result).toStrictEqual<typeof result>({
				id: result.id,
				lockedTimestamp: new Date(),
				reverseAccepted: true,
			});
		});
	});
});
