diff --git a/dist/adapters/standalone.d.ts b/dist/adapters/standalone.d.ts
index 705dd85..7550286 100644
--- a/dist/adapters/standalone.d.ts
+++ b/dist/adapters/standalone.d.ts
@@ -7,7 +7,7 @@ export type CreateHTTPContextOptions = NodeHTTPCreateContextFnOptions<http.Incom
 export declare function createHTTPHandler<TRouter extends AnyRouter>(opts: CreateHTTPHandlerOptions<TRouter>): (req: http.IncomingMessage, res: http.ServerResponse) => Promise<void>;
 export declare function createHTTPServer<TRouter extends AnyRouter>(opts: CreateHTTPHandlerOptions<TRouter>): {
     server: http.Server<typeof http.IncomingMessage, typeof http.ServerResponse>;
-    listen: (port?: number, hostname?: string) => {
+    listen: (port?: number, hostname?: string, listeningListener?: () => void) => {
         port: number | undefined;
     };
 };
diff --git a/dist/adapters/standalone.d.ts.map b/dist/adapters/standalone.d.ts.map
index 34215f7..479cb0a 100644
--- a/dist/adapters/standalone.d.ts.map
+++ b/dist/adapters/standalone.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"standalone.d.ts","sourceRoot":"","sources":["../../src/adapters/standalone.ts"],"names":[],"mappings":";AACA,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AACpC,OAAO,EACL,8BAA8B,EAC9B,sBAAsB,EAEvB,MAAM,aAAa,CAAC;AAErB,MAAM,MAAM,wBAAwB,CAAC,OAAO,SAAS,SAAS,IAC5D,sBAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;AAE7E,MAAM,MAAM,wBAAwB,GAAG,8BAA8B,CACnE,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,cAAc,CACpB,CAAC;AAEF,wBAAgB,iBAAiB,CAAC,OAAO,SAAS,SAAS,EACzD,IAAI,EAAE,wBAAwB,CAAC,OAAO,CAAC,SAEpB,KAAK,eAAe,OAAO,KAAK,cAAc,mBAiBlE;AAED,wBAAgB,gBAAgB,CAAC,OAAO,SAAS,SAAS,EACxD,IAAI,EAAE,wBAAwB,CAAC,OAAO,CAAC;;oBAOrB,MAAM,aAAa,MAAM;;;EAU5C"}
\ No newline at end of file
+{"version":3,"file":"standalone.d.ts","sourceRoot":"","sources":["../../src/adapters/standalone.ts"],"names":[],"mappings":";AACA,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,SAAS,EAAE,MAAM,SAAS,CAAC;AACpC,OAAO,EACL,8BAA8B,EAC9B,sBAAsB,EAEvB,MAAM,aAAa,CAAC;AAErB,MAAM,MAAM,wBAAwB,CAAC,OAAO,SAAS,SAAS,IAC5D,sBAAsB,CAAC,OAAO,EAAE,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,cAAc,CAAC,CAAC;AAE7E,MAAM,MAAM,wBAAwB,GAAG,8BAA8B,CACnE,IAAI,CAAC,eAAe,EACpB,IAAI,CAAC,cAAc,CACpB,CAAC;AAEF,wBAAgB,iBAAiB,CAAC,OAAO,SAAS,SAAS,EACzD,IAAI,EAAE,wBAAwB,CAAC,OAAO,CAAC,SAEpB,KAAK,eAAe,OAAO,KAAK,cAAc,mBAiBlE;AAED,wBAAgB,gBAAgB,CAAC,OAAO,SAAS,SAAS,EACxD,IAAI,EAAE,wBAAwB,CAAC,OAAO,CAAC;;oBAQ5B,MAAM,aACF,MAAM,sBACG,MAAM,IAAI;;;EAWnC"}
\ No newline at end of file
diff --git a/dist/adapters/standalone.js b/dist/adapters/standalone.js
index 68f4475..0759aff 100644
--- a/dist/adapters/standalone.js
+++ b/dist/adapters/standalone.js
@@ -39,8 +39,8 @@ function createHTTPServer(opts) {
     const server = http__default["default"].createServer((req, res)=>handler(req, res));
     return {
         server,
-        listen: (port, hostname)=>{
-            server.listen(port, hostname);
+        listen: (port, hostname, listeningListener)=>{
+            server.listen(port, hostname, listeningListener);
             const actualPort = port === 0 ? server.address().port : port;
             return {
                 port: actualPort
diff --git a/dist/adapters/standalone.mjs b/dist/adapters/standalone.mjs
index 7a2938e..f8485fd 100644
--- a/dist/adapters/standalone.mjs
+++ b/dist/adapters/standalone.mjs
@@ -31,8 +31,8 @@ function createHTTPServer(opts) {
     const server = http.createServer((req, res)=>handler(req, res));
     return {
         server,
-        listen: (port, hostname)=>{
-            server.listen(port, hostname);
+        listen: (port, hostname, listeningListener)=>{
+            server.listen(port, hostname, listeningListener);
             const actualPort = port === 0 ? server.address().port : port;
             return {
                 port: actualPort
diff --git a/src/adapters/standalone.ts b/src/adapters/standalone.ts
index b5b4cb1..1c6bbf8 100644
--- a/src/adapters/standalone.ts
+++ b/src/adapters/standalone.ts
@@ -45,8 +45,12 @@ export function createHTTPServer<TRouter extends AnyRouter>(
 
   return {
     server,
-    listen: (port?: number, hostname?: string) => {
-      server.listen(port, hostname);
+    listen: (
+      port?: number,
+      hostname?: string,
+      listeningListener?: () => void,
+    ) => {
+      server.listen(port, hostname, listeningListener);
       const actualPort =
         port === 0 ? ((server.address() as any).port as number) : port;
 