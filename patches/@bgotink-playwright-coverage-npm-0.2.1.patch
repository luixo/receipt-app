diff --git a/lib/data.d.ts b/lib/data.d.ts
index 0f9ac2c2c8697d703d832aabeaf4b158ce13708f..39f306a93924db5e05af494d03c6ae747b44f41e 100644
--- a/lib/data.d.ts
+++ b/lib/data.d.ts
@@ -1,9 +1,15 @@
 import type { ProcessCov } from '@bcoe/v8-coverage';
 import type { EncodedSourceMap } from '@jridgewell/trace-mapping';
 import type { Suite } from '@playwright/test/reporter';
+import type { RewritePath } from './reporter';
+import type { ProxyMarked } from 'comlink';
 export declare const attachmentName = "@bgotink/playwright-coverage";
+export declare type SourceMapResolver = (opts: {
+    url: string;
+    mappedUrl?: string;
+}) => Promise<string>;
 export declare function collectV8CoverageFiles(suite: Suite): Set<string>;
-export declare function getSourceMap(url: string, source: string): Promise<EncodedSourceMap | undefined>;
-export declare function getSourceMaps(sources: ReadonlyMap<string, string>): Promise<ReadonlyMap<string, EncodedSourceMap | undefined>>;
-export declare function convertToIstanbulCoverage(v8Coverage: ProcessCov, sources: ReadonlyMap<string, string>, sourceMaps: ReadonlyMap<string, EncodedSourceMap | undefined>, exclude: readonly string[], sourceRoot: string): Promise<import("istanbul-lib-coverage").CoverageMap>;
+export declare function getSourceMap(url: string, source: string, sourceMapResolver?: SourceMapResolver): Promise<EncodedSourceMap | undefined>;
+export declare function getSourceMaps(sources: ReadonlyMap<string, string>, sourceMapResolver?: SourceMapResolver): Promise<ReadonlyMap<string, EncodedSourceMap | undefined>>;
+export declare function convertToIstanbulCoverage(v8Coverage: ProcessCov, sources: ReadonlyMap<string, string>, sourceMaps: ReadonlyMap<string, EncodedSourceMap | undefined>, exclude: readonly string[], sourceRoot: string, rewritePath: RewritePath & ProxyMarked): Promise<import("istanbul-lib-coverage").CoverageMap>;
 //# sourceMappingURL=data.d.ts.map
\ No newline at end of file
diff --git a/lib/data.d.ts.map b/lib/data.d.ts.map
index bb2968bd3b2624803deacb560a2bcf2c4a04d58e..646ff8ae066c262fb71aef35a6605729999eb0a0 100644
--- a/lib/data.d.ts.map
+++ b/lib/data.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"data.d.ts","sourceRoot":"","sources":["../src/data.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAC,UAAU,EAAC,MAAM,mBAAmB,CAAC;AAClD,OAAO,KAAK,EAAC,gBAAgB,EAAC,MAAM,2BAA2B,CAAC;AAChE,OAAO,KAAK,EAAC,KAAK,EAAa,MAAM,2BAA2B,CAAC;AAQjE,eAAO,MAAM,cAAc,iCAAiC,CAAC;AAE7D,wBAAgB,sBAAsB,CAAC,KAAK,EAAE,KAAK,eAwBlD;AAMD,wBAAsB,YAAY,CAChC,GAAG,EAAE,MAAM,EACX,MAAM,EAAE,MAAM,GACb,OAAO,CAAC,gBAAgB,GAAG,SAAS,CAAC,CAqDvC;AAED,wBAAsB,aAAa,CACjC,OAAO,EAAE,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,GACnC,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,gBAAgB,GAAG,SAAS,CAAC,CAAC,CAU5D;AAED,wBAAsB,yBAAyB,CAC7C,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,EACpC,UAAU,EAAE,WAAW,CAAC,MAAM,EAAE,gBAAgB,GAAG,SAAS,CAAC,EAC7D,OAAO,EAAE,SAAS,MAAM,EAAE,EAC1B,UAAU,EAAE,MAAM,wDAoGnB"}
\ No newline at end of file
+{"version":3,"file":"data.d.ts","sourceRoot":"","sources":["../src/data.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EAAC,UAAU,EAAC,MAAM,mBAAmB,CAAC;AAClD,OAAO,KAAK,EAAC,gBAAgB,EAAC,MAAM,2BAA2B,CAAC;AAChE,OAAO,KAAK,EAAC,KAAK,EAAa,MAAM,2BAA2B,CAAC;AAEjE,OAAO,KAAK,EAAC,WAAW,EAAC,MAAM,YAAY,CAAC;AAM5C,OAAO,KAAK,EAAC,WAAW,EAAC,MAAM,SAAS,CAAC;AAEzC,eAAO,MAAM,cAAc,iCAAiC,CAAC;AAE7D,oBAAY,iBAAiB,GAAG,CAAC,IAAI,EAAE;IACrC,GAAG,EAAE,MAAM,CAAC;IACZ,SAAS,CAAC,EAAE,MAAM,CAAC;CACpB,KAAK,OAAO,CAAC,MAAM,CAAC,CAAC;AAEtB,wBAAgB,sBAAsB,CAAC,KAAK,EAAE,KAAK,eAwBlD;AAMD,wBAAsB,YAAY,CAChC,GAAG,EAAE,MAAM,EACX,MAAM,EAAE,MAAM,EACd,iBAAiB,CAAC,EAAE,iBAAiB,GACpC,OAAO,CAAC,gBAAgB,GAAG,SAAS,CAAC,CAwDvC;AAED,wBAAsB,aAAa,CACjC,OAAO,EAAE,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,EACpC,iBAAiB,CAAC,EAAE,iBAAiB,GACpC,OAAO,CAAC,WAAW,CAAC,MAAM,EAAE,gBAAgB,GAAG,SAAS,CAAC,CAAC,CAU5D;AAED,wBAAsB,yBAAyB,CAC7C,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,EACpC,UAAU,EAAE,WAAW,CAAC,MAAM,EAAE,gBAAgB,GAAG,SAAS,CAAC,EAC7D,OAAO,EAAE,SAAS,MAAM,EAAE,EAC1B,UAAU,EAAE,MAAM,EAClB,WAAW,EAAE,WAAW,GAAG,WAAW,wDAgHvC"}
\ No newline at end of file
diff --git a/lib/data.js b/lib/data.js
index 25d649af1dbe39fd8c6705d9c3b42b76e16341c8..6db07697e1152eef74032a85a0369d52266b358d 100644
--- a/lib/data.js
+++ b/lib/data.js
@@ -29,20 +29,23 @@ function collectV8CoverageFiles(suite) {
 }
 exports.collectV8CoverageFiles = collectV8CoverageFiles;
 const fetch = eval('import("node-fetch")');
-async function getSourceMap(url, source) {
+async function getSourceMap(url, source, sourceMapResolver) {
     const match = source.match(/\/\/# *sourceMappingURL=(.*)/);
     if (match == null) {
         try {
-            const response = await (await fetch).default(`${url}.map`, {
-                method: 'GET',
-            });
+            const resolvedUrl = sourceMapResolver
+                ? await sourceMapResolver({ url })
+                : `${url}.map`;
+            const response = await (await fetch).default(resolvedUrl, { method: 'GET' });
             return (await response.json());
         }
         catch {
             return undefined;
         }
     }
-    const resolved = new url_1.URL(match[1], url);
+    const resolved = sourceMapResolver
+        ? new url_1.URL(await sourceMapResolver({ url, mappedUrl: match[1] }))
+        : new url_1.URL(match[1], url);
     try {
         switch (resolved.protocol) {
             case 'file:':
@@ -74,11 +77,11 @@ async function getSourceMap(url, source) {
     }
 }
 exports.getSourceMap = getSourceMap;
-async function getSourceMaps(sources) {
-    return new Map(await Promise.all(Array.from(sources, async ([url, source]) => [url, await getSourceMap(url, source)])));
+async function getSourceMaps(sources, sourceMapResolver) {
+    return new Map(await Promise.all(Array.from(sources, async ([url, source]) => [url, await getSourceMap(url, source, sourceMapResolver)])));
 }
 exports.getSourceMaps = getSourceMaps;
-async function convertToIstanbulCoverage(v8Coverage, sources, sourceMaps, exclude, sourceRoot) {
+async function convertToIstanbulCoverage(v8Coverage, sources, sourceMaps, exclude, sourceRoot, rewritePath) {
     const istanbulCoverage = (0, istanbul_lib_coverage_1.createCoverageMap)({});
     for (const script of v8Coverage.result) {
         const source = sources.get(script.url);
@@ -114,7 +117,15 @@ async function convertToIstanbulCoverage(v8Coverage, sources, sourceMaps, exclud
         const isExcludedCache = new Map();
         const convertor = (0, v8_to_istanbul_1.default)('', 0, {
             source,
-            sourceMap: { sourcemap: sourceMap },
+            sourceMap: {
+                sourcemap: {
+                    ...sourceMap,
+                    sourceRoot,
+                    sources: await Promise.all(sourceMap.sources
+                        .filter(Boolean)
+                        .map(relativePath => rewritePath({ relativePath: relativePath, absolutePath: '' }))),
+                },
+            },
         }, path => {
             let isExcluded = isExcludedCache.get(path);
             if (isExcluded != null) {
@@ -152,4 +163,4 @@ async function convertToIstanbulCoverage(v8Coverage, sources, sourceMaps, exclud
     return istanbulCoverage;
 }
 exports.convertToIstanbulCoverage = convertToIstanbulCoverage;
-//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBLDJCQUFrQztBQUNsQyxpRUFBd0Q7QUFDeEQsMkNBQW1DO0FBQ25DLCtCQUEyQjtBQUMzQiw2QkFBdUM7QUFDdkMsb0VBQTBDO0FBRTdCLFFBQUEsY0FBYyxHQUFHLDhCQUE4QixDQUFDO0FBRTdELFNBQWdCLHNCQUFzQixDQUFDLEtBQVk7SUFDakQsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztJQUVoQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUNuQyxLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakMsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQ2xELENBQUMsRUFBQyxJQUFJLEVBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLHNCQUFjLENBQ3BDLENBQUM7WUFFRixJQUFJLGVBQWUsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDMUIsU0FBUzthQUNWO1lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBRWhFLENBQUM7WUFFRixJQUFJLFVBQVUsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO2dCQUMzQixLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM1QjtTQUNGO0tBQ0Y7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUF4QkQsd0RBd0JDO0FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUV4QyxDQUFDO0FBRUssS0FBSyxVQUFVLFlBQVksQ0FDaEMsR0FBVyxFQUNYLE1BQWM7SUFFZCxNQUFNLEtBQUssR0FBRyxNQUFNLENB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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGF0YS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy9kYXRhLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7OztBQUdBLDJCQUFrQztBQUVsQyxpRUFBd0Q7QUFDeEQsMkNBQW1DO0FBQ25DLCtCQUEyQjtBQUMzQiw2QkFBdUM7QUFDdkMsb0VBQTBDO0FBRzdCLFFBQUEsY0FBYyxHQUFHLDhCQUE4QixDQUFDO0FBTzdELFNBQWdCLHNCQUFzQixDQUFDLEtBQVk7SUFDakQsTUFBTSxLQUFLLEdBQUcsSUFBSSxHQUFHLEVBQVUsQ0FBQztJQUVoQyxLQUFLLE1BQU0sSUFBSSxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUUsRUFBRTtRQUNuQyxLQUFLLE1BQU0sTUFBTSxJQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDakMsTUFBTSxlQUFlLEdBQUcsTUFBTSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQ2xELENBQUMsRUFBQyxJQUFJLEVBQUMsRUFBRSxFQUFFLENBQUMsSUFBSSxLQUFLLHNCQUFjLENBQ3BDLENBQUM7WUFFRixJQUFJLGVBQWUsS0FBSyxDQUFDLENBQUMsRUFBRTtnQkFDMUIsU0FBUzthQUNWO1lBRUQsTUFBTSxDQUFDLFVBQVUsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxXQUFXLENBQUMsTUFBTSxDQUFDLGVBQWUsRUFBRSxDQUFDLENBRWhFLENBQUM7WUFFRixJQUFJLFVBQVUsQ0FBQyxJQUFJLElBQUksSUFBSSxFQUFFO2dCQUMzQixLQUFLLENBQUMsR0FBRyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQzthQUM1QjtTQUNGO0tBQ0Y7SUFFRCxPQUFPLEtBQUssQ0FBQztBQUNmLENBQUM7QUF4QkQsd0RBd0JDO0FBRUQsTUFBTSxLQUFLLEdBQUcsSUFBSSxDQUFDLHNCQUFzQixDQUV4QyxDQUFDO0FBRUssS0FBSyxVQUFVLFlBQVksQ0FDaEMsR0FBVyxFQUNYLE1BQWMsRUFDZCxpQkFBcUM7SUFFckMsTUFBTSxLQUFL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
\ No newline at end of file
diff --git a/lib/reporter.d.ts b/lib/reporter.d.ts
index 99a856561df04d6efc0c2744c42a8c0ae6c9cec9..7dbb2f3c2be10e783aad3013d48b662c1de6f775 100644
--- a/lib/reporter.d.ts
+++ b/lib/reporter.d.ts
@@ -1,10 +1,19 @@
 import type { FullConfig, FullResult, Reporter, TestResult } from '@playwright/test/reporter';
 import { Watermarks } from 'istanbul-lib-report';
 import { ReportType, ReportOptions } from 'istanbul-reports';
+import { SourceMapResolver } from './data.js';
+export declare type RewritePath = (file: {
+    relativePath: string;
+    absolutePath: string;
+}) => string;
 /**
  * Options to the coverage repoter
  */
 export interface CoverageReporterOptions {
+    /**
+     * Glob(s) defining file(s) to include in coverage tracking
+     */
+    include?: string | string[];
     /**
      * Glob(s) defining file(s) to exclude from coverage tracking
      */
@@ -35,13 +44,12 @@ export interface CoverageReporterOptions {
      *
      * If no function is passed, the absolute path passed into this function is used.
      */
-    rewritePath?: (file: {
-        relativePath: string;
-        absolutePath: string;
-    }) => string;
+    rewritePath?: RewritePath;
+    sourceMapResolver?: SourceMapResolver;
 }
 export declare class CoverageReporter implements Reporter {
     private readonly exclude;
+    private readonly include;
     private readonly resultDir;
     private readonly reports;
     private readonly sourceRoot?;
@@ -49,8 +57,9 @@ export declare class CoverageReporter implements Reporter {
     private readonly rewritePath?;
     private readonly workerInstance;
     private readonly worker;
+    private readonly sourceMapResolver?;
     private config;
-    constructor({ exclude, sourceRoot, resultDir, reports, watermarks, rewritePath, }?: CoverageReporterOptions);
+    constructor({ include, exclude, sourceRoot, resultDir, reports, watermarks, rewritePath, sourceMapResolver, }?: CoverageReporterOptions);
     onBegin(config: FullConfig): void;
     onTestEnd(_: unknown, result: TestResult): void;
     onEnd(result: FullResult): Promise<void>;
diff --git a/lib/reporter.d.ts.map b/lib/reporter.d.ts.map
index 35ac12902ca9275ddec28d56f3112ea185e86531..29ba0f4a83f608dac5fa22494f856b93f9e72072 100644
--- a/lib/reporter.d.ts.map
+++ b/lib/reporter.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"reporter.d.ts","sourceRoot":"","sources":["../src/reporter.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,UAAU,EACV,UAAU,EACV,QAAQ,EACR,UAAU,EACX,MAAM,2BAA2B,CAAC;AAKnC,OAAO,EAAgB,UAAU,EAAC,MAAM,qBAAqB,CAAC;AAC9D,OAAO,EAAS,UAAU,EAAE,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAOnE;;GAEG;AACH,MAAM,WAAW,uBAAuB;IACtC;;OAEG;IACH,OAAO,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;IAE5B;;OAEG;IACH,UAAU,CAAC,EAAE,MAAM,CAAC;IAEpB;;;;OAIG;IACH,SAAS,CAAC,EAAE,MAAM,CAAC;IAEnB;;OAEG;IACH,OAAO,CAAC,EAAE,CACN,UAAU,GACV,CAAC,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC,CACtD,EAAE,CAAC;IAEJ;;OAEG;IACH,UAAU,CAAC,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;IAEjC;;;;;;;OAOG;IACH,WAAW,CAAC,EAAE,CAAC,IAAI,EAAE;QAAC,YAAY,EAAE,MAAM,CAAC;QAAC,YAAY,EAAE,MAAM,CAAA;KAAC,KAAK,MAAM,CAAC;CAC9E;AAED,qBAAa,gBAAiB,YAAW,QAAQ;IAC/C,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAoB;IAC5C,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAS;IACnC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAGpB;IACJ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAS;IACrC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAsB;IAClD,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAyC;IAEtE,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAS;IACxC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAyB;IAEhD,OAAO,CAAC,MAAM,CAAc;gBAEhB,EACV,OAAO,EACP,UAAU,EACV,SAAS,EACT,OAA0B,EAC1B,UAAU,EACV,WAAW,GACZ,GAAE,uBAA4B;IAY/B,OAAO,CAAC,MAAM,EAAE,UAAU,GAAG,IAAI;IAMjC,SAAS,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,GAAG,IAAI;IAczC,KAAK,CAAC,MAAM,EAAE,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC;CAgD/C"}
\ No newline at end of file
+{"version":3,"file":"reporter.d.ts","sourceRoot":"","sources":["../src/reporter.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,EACV,UAAU,EACV,UAAU,EACV,QAAQ,EACR,UAAU,EACX,MAAM,2BAA2B,CAAC;AAKnC,OAAO,EAAgB,UAAU,EAAC,MAAM,qBAAqB,CAAC;AAC9D,OAAO,EAAS,UAAU,EAAE,aAAa,EAAC,MAAM,kBAAkB,CAAC;AAInE,OAAO,EAAiB,iBAAiB,EAAC,MAAM,WAAW,CAAC;AAG5D,oBAAY,WAAW,GAAG,CAAC,IAAI,EAAE;IAC/B,YAAY,EAAE,MAAM,CAAC;IACrB,YAAY,EAAE,MAAM,CAAC;CACtB,KAAK,MAAM,CAAC;AAEb;;GAEG;AACH,MAAM,WAAW,uBAAuB;IACtC;;OAEG;IACH,OAAO,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;IAE5B;;OAEG;IACH,OAAO,CAAC,EAAE,MAAM,GAAG,MAAM,EAAE,CAAC;IAE5B;;OAEG;IACH,UAAU,CAAC,EAAE,MAAM,CAAC;IAEpB;;;;OAIG;IACH,SAAS,CAAC,EAAE,MAAM,CAAC;IAEnB;;OAEG;IACH,OAAO,CAAC,EAAE,CACN,UAAU,GACV,CAAC,UAAU,EAAE,aAAa,CAAC,UAAU,CAAC,GAAG,SAAS,CAAC,CACtD,EAAE,CAAC;IAEJ;;OAEG;IACH,UAAU,CAAC,EAAE,OAAO,CAAC,UAAU,CAAC,CAAC;IAEjC;;;;;;;OAOG;IACH,WAAW,CAAC,EAAE,WAAW,CAAC;IAE1B,iBAAiB,CAAC,EAAE,iBAAiB,CAAC;CACvC;AAID,qBAAa,gBAAiB,YAAW,QAAQ;IAC/C,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAoB;IAC5C,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAoB;IAC5C,OAAO,CAAC,QAAQ,CAAC,SAAS,CAAS;IACnC,OAAO,CAAC,QAAQ,CAAC,OAAO,CAGpB;IACJ,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAS;IACrC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAsB;IAClD,OAAO,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAyC;IAEtE,OAAO,CAAC,QAAQ,CAAC,cAAc,CAAS;IACxC,OAAO,CAAC,QAAQ,CAAC,MAAM,CAAyB;IAChD,OAAO,CAAC,QAAQ,CAAC,iBAAiB,CAAC,CAAoB;IAEvD,OAAO,CAAC,MAAM,CAAc;gBAEhB,EACV,OAAO,EACP,OAAO,EACP,UAAU,EACV,SAAS,EACT,OAA0B,EAC1B,UAAU,EACV,WAAW,EACX,iBAAiB,GAClB,GAAE,uBAA4B;IAc/B,OAAO,CAAC,MAAM,EAAE,UAAU,GAAG,IAAI;IAajC,SAAS,CAAC,CAAC,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,GAAG,IAAI;IAiBzC,KAAK,CAAC,MAAM,EAAE,UAAU,GAAG,OAAO,CAAC,IAAI,CAAC;CAoD/C"}
\ No newline at end of file
diff --git a/lib/reporter.js b/lib/reporter.js
index 4374a455d8a9ccda39aced825f25ebd154d07df3..c7a2beb6b811e51336de57988f1bd5877551fd48 100644
--- a/lib/reporter.js
+++ b/lib/reporter.js
@@ -13,27 +13,35 @@ const istanbul_reports_1 = require("istanbul-reports");
 const path_1 = __importDefault(require("path"));
 const worker_threads_1 = require("worker_threads");
 const data_js_1 = require("./data.js");
+const defaultRewritePath = ({ relativePath }) => relativePath;
 class CoverageReporter {
-    constructor({ exclude, sourceRoot, resultDir, reports = ['text-summary'], watermarks, rewritePath, } = {}) {
+    constructor({ include, exclude, sourceRoot, resultDir, reports = ['text-summary'], watermarks, rewritePath, sourceMapResolver, } = {}) {
         this.exclude = typeof exclude === 'string' ? [exclude] : exclude !== null && exclude !== void 0 ? exclude : [];
+        this.include = typeof include === 'string' ? [include] : include !== null && include !== void 0 ? include : [];
         this.resultDir = resultDir || 'coverage';
         this.reports = reports;
         this.sourceRoot = sourceRoot;
         this.watermarks = watermarks;
         this.rewritePath = rewritePath;
+        this.sourceMapResolver = sourceMapResolver;
         this.workerInstance = new worker_threads_1.Worker(require.resolve('./worker.js'));
         this.worker = (0, comlink_1.wrap)((0, node_adapter_1.default)(this.workerInstance));
     }
     onBegin(config) {
+        var _a;
         this.config = config;
         void this.worker.reset();
+        if (this.include) {
+            const sourceRoot = (_a = this.sourceRoot) !== null && _a !== void 0 ? _a : this.config.rootDir;
+            this.worker.include(this.include, sourceRoot, (0, comlink_1.proxy)(this.sourceMapResolver));
+        }
     }
     onTestEnd(_, result) {
         const attachmentIndex = result.attachments.findIndex(({ name }) => name === data_js_1.attachmentName);
         if (attachmentIndex !== -1) {
             const [attachment] = result.attachments.splice(attachmentIndex, 1);
             if ((attachment === null || attachment === void 0 ? void 0 : attachment.path) != null) {
-                void this.worker.startConversion(attachment.path);
+                void this.worker.startConversion(attachment.path, (0, comlink_1.proxy)(this.sourceMapResolver));
             }
         }
     }
@@ -43,7 +51,7 @@ class CoverageReporter {
             return;
         }
         const sourceRoot = (_a = this.sourceRoot) !== null && _a !== void 0 ? _a : this.config.rootDir;
-        const coverage = (0, istanbul_lib_coverage_1.createCoverageMap)(Object.fromEntries(Object.entries(JSON.parse(await this.worker.getTotalCoverage(sourceRoot, this.exclude))).map(([relativePath, data]) => {
+        const coverage = (0, istanbul_lib_coverage_1.createCoverageMap)(Object.fromEntries(Object.entries(JSON.parse(await this.worker.getTotalCoverage(sourceRoot, this.exclude, (0, comlink_1.proxy)(this.rewritePath || defaultRewritePath)))).map(([relativePath, data]) => {
             var _a, _b;
             const absolutePath = path_1.default.resolve(sourceRoot, relativePath);
             const newPath = (_b = (_a = this.rewritePath) === null || _a === void 0 ? void 0 : _a.call(this, { absolutePath, relativePath })) !== null && _b !== void 0 ? _b : absolutePath;
@@ -75,4 +83,4 @@ class CoverageReporter {
     }
 }
 exports.CoverageReporter = CoverageReporter;
-//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVwb3J0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBTUEscUNBQXFDO0FBQ3JDLGlGQUF5RDtBQUN6RCwyQkFBZ0M7QUFDaEMsaUVBQXlFO0FBQ3pFLDZEQUE4RDtBQUM5RCx1REFBbUU7QUFDbkUsZ0RBQXdCO0FBQ3hCLG1EQUFzQztBQUV0Qyx1Q0FBeUM7QUFnRHpDLE1BQWEsZ0JBQWdCO0lBZ0IzQixZQUFZLEVBQ1YsT0FBTyxFQUNQLFVBQVUsRUFDVixTQUFTLEVBQ1QsT0FBTyxHQUFHLENBQUMsY0FBYyxDQUFDLEVBQzFCLFVBQVUsRUFDVixXQUFXLE1BQ2dCLEVBQUU7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sYUFBUCxPQUFPLGNBQVAsT0FBTyxHQUFJLEVBQUUsQ0FBQztRQUN2RSxJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsSUFBSSxVQUFVLENBQUM7UUFDekMsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUM7UUFDdkIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUM7UUFDN0IsSUFBSSxDQUFDLFdBQVcsR0FBRyxXQUFXLENBQUM7UUFFL0IsSUFBSSxDQUFDLGNBQWMsR0FBRyxJQUFJLHVCQUFNLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsQ0FBQyxDQUFDO1FBQ2pFLElBQUksQ0FBQyxNQUFNLEdBQUcsSUFBQSxjQUFJLEVBQWlCLElBQUEsc0JBQVksRUFBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUMsQ0FBQztJQUN4RSxDQUFDO0lBRUQsT0FBTyxDQUFDLE1BQWtCO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcs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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVwb3J0ZXIuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi9zcmMvcmVwb3J0ZXIudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBTUEscUNBQTRDO0FBQzVDLGlGQUF5RDtBQUN6RCwyQkFBZ0M7QUFDaEMsaUVBQXlFO0FBQ3pFLDZEQUE4RDtBQUM5RCx1REFBbUU7QUFDbkUsZ0RBQXdCO0FBQ3hCLG1EQUFzQztBQUV0Qyx1Q0FBNEQ7QUE0RDVELE1BQU0sa0JBQWtCLEdBQWdCLENBQUMsRUFBQyxZQUFZLEVBQUMsRUFBRSxFQUFFLENBQUMsWUFBWSxDQUFDO0FBRXpFLE1BQWEsZ0JBQWdCO0lBa0IzQixZQUFZLEVBQ1YsT0FBTyxFQUNQLE9BQU8sRUFDUCxVQUFVLEVBQ1YsU0FBUyxFQUNULE9BQU8sR0FBRyxDQUFDLGNBQWMsQ0FBQyxFQUMxQixVQUFVLEVBQ1YsV0FBVyxFQUNYLGlCQUFpQixNQUNVLEVBQUU7UUFDN0IsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLE9BQU8sS0FBSyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sYUFBUCxPQUFPLGNBQVAsT0FBTyxHQUFJLEVBQUUsQ0FBQztRQUN2RSxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sT0FBTyxLQUFLLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxhQUFQLE9BQU8sY0FBUCxPQUFPLEdBQUksRUFBRSxDQUFDO1FBQ3ZFLElBQUksQ0FBQyxTQUFTLEdBQUcsU0FBUyxJQUFJLFVBQVUsQ0FBQztRQUN6QyxJQUFJLENBQUMsT0FBTyxHQUFHLE9BQU8sQ0FBQztRQUN2QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsVUFBVSxHQUFHLFVBQVUsQ0FBQztRQUM3QixJQUFJLENBQUMsV0FBVyxHQUFHLFdBQVcsQ0FBQztRQUMvQixJ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
\ No newline at end of file
diff --git a/lib/worker.d.ts b/lib/worker.d.ts
index 468f9ddc549c614d71b2baf136803835a0f062c1..1ba6c9adec95d62c5e02e2e62939d107cb956079 100644
--- a/lib/worker.d.ts
+++ b/lib/worker.d.ts
@@ -1,8 +1,13 @@
+import { ProxyMarked } from 'comlink';
+import { SourceMapResolver } from './data';
+import type { RewritePath } from './reporter';
 declare class CoverageWorker {
     #private;
-    startConversion(path: string): void;
+    include(globs: readonly string[], sourceRoot: string, sourceMapResolver?: SourceMapResolver): Promise<void>;
+    startConversion(path: string, sourceMapResolver?: SourceMapResolver): void;
+    convertFile(path: string, sourceMapResolver?: SourceMapResolver): Promise<void>;
     reset(): void;
-    getTotalCoverage(sourceRoot: string, exclude: readonly string[]): Promise<string>;
+    getTotalCoverage(sourceRoot: string, exclude: readonly string[], rewritePath: RewritePath & ProxyMarked): Promise<string>;
 }
 export type { CoverageWorker };
 //# sourceMappingURL=worker.d.ts.map
\ No newline at end of file
diff --git a/lib/worker.d.ts.map b/lib/worker.d.ts.map
index 2d687425ed714d24e8ba10fe633ec8114df23a81..fbc498177c78b4575f3d2ed094b95ca9b5c177e5 100644
--- a/lib/worker.d.ts.map
+++ b/lib/worker.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"worker.d.ts","sourceRoot":"","sources":["../src/worker.ts"],"names":[],"mappings":"AAYA,cAAM,cAAc;;IAalB,eAAe,CAAC,IAAI,EAAE,MAAM;IAQ5B,KAAK;IA2CC,gBAAgB,CAAC,UAAU,EAAE,MAAM,EAAE,OAAO,EAAE,SAAS,MAAM,EAAE;CAwBtE;AAED,YAAY,EAAC,cAAc,EAAC,CAAC"}
\ No newline at end of file
+{"version":3,"file":"worker.d.ts","sourceRoot":"","sources":["../src/worker.ts"],"names":[],"mappings":"AAGA,OAAO,EAAS,WAAW,EAAC,MAAM,SAAS,CAAC;AAM5C,OAAO,EAGL,iBAAiB,EAClB,MAAM,QAAQ,CAAC;AAChB,OAAO,KAAK,EAAC,WAAW,EAAC,MAAM,YAAY,CAAC;AAM5C,cAAM,cAAc;;IAaZ,OAAO,CACX,KAAK,EAAE,SAAS,MAAM,EAAE,EACxB,UAAU,EAAE,MAAM,EAClB,iBAAiB,CAAC,EAAE,iBAAiB;IAoCvC,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,iBAAiB,CAAC,EAAE,iBAAiB;IAI7D,WAAW,CAAC,IAAI,EAAE,MAAM,EAAE,iBAAiB,CAAC,EAAE,iBAAiB;IAMrE,KAAK;IA+BC,gBAAgB,CACpB,UAAU,EAAE,MAAM,EAClB,OAAO,EAAE,SAAS,MAAM,EAAE,EAC1B,WAAW,EAAE,WAAW,GAAG,WAAW;CAuBzC;AAED,YAAY,EAAC,cAAc,EAAC,CAAC"}
\ No newline at end of file
diff --git a/lib/worker.js b/lib/worker.js
index debc2cfb147aaeaa15aedf1e47889fd06b9761ca..7ad2e56f4f021c9464418bc9ad0a7fb11a2421c5 100644
--- a/lib/worker.js
+++ b/lib/worker.js
@@ -13,73 +13,93 @@ var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (
 var __importDefault = (this && this.__importDefault) || function (mod) {
     return (mod && mod.__esModule) ? mod : { "default": mod };
 };
-var _CoverageWorker_instances, _CoverageWorker_queue, _CoverageWorker_sources, _CoverageWorker_sourceMaps, _CoverageWorker_totalCoverage, _CoverageWorker_markReady, _CoverageWorker_convert;
+var _CoverageWorker_instances, _CoverageWorker_sources, _CoverageWorker_sourceMaps, _CoverageWorker_totalCoverage, _CoverageWorker_readyPromises, _CoverageWorker_convert;
 Object.defineProperty(exports, "__esModule", { value: true });
 const v8_coverage_1 = require("@bcoe/v8-coverage");
 const worker_threads_1 = require("worker_threads");
 const comlink_1 = require("comlink");
+const glob_1 = require("glob");
 const node_adapter_1 = __importDefault(require("comlink/dist/umd/node-adapter"));
 const fs_1 = require("fs");
+const path_1 = __importDefault(require("path"));
+const url_1 = __importDefault(require("url"));
 const data_1 = require("./data");
 if (worker_threads_1.parentPort == null) {
     throw new Error('This script is meant to run as worker thread');
 }
 class CoverageWorker {
     constructor() {
-        _CoverageWorker_instances.add(this);
         /**
          * Invariant: if #queue.length > 0, conversion is active
          */
-        _CoverageWorker_queue.set(this, []);
+        // #queue: string[] = [];
+        _CoverageWorker_instances.add(this);
         _CoverageWorker_sources.set(this, new Map());
         _CoverageWorker_sourceMaps.set(this, new Map());
         _CoverageWorker_totalCoverage.set(this, { result: [] });
-        _CoverageWorker_markReady.set(this, void 0);
+        _CoverageWorker_readyPromises.set(this, []);
     }
-    startConversion(path) {
-        __classPrivateFieldGet(this, _CoverageWorker_queue, "f").push(path);
-        if (__classPrivateFieldGet(this, _CoverageWorker_queue, "f").length === 1) {
-            __classPrivateFieldGet(this, _CoverageWorker_instances, "m", _CoverageWorker_convert).call(this);
-        }
+    async include(globs, sourceRoot, sourceMapResolver) {
+        const files = await (0, glob_1.glob)(globs.map(globPattern => path_1.default.resolve(sourceRoot, globPattern)));
+        __classPrivateFieldGet(this, _CoverageWorker_readyPromises, "f").push(...files.map(async (file) => {
+            await __classPrivateFieldGet(this, _CoverageWorker_instances, "m", _CoverageWorker_convert).call(this, {
+                result: [
+                    {
+                        functions: [
+                            {
+                                ranges: [
+                                    {
+                                        startOffset: 0,
+                                        endOffset: Infinity,
+                                        count: 0,
+                                    },
+                                ],
+                                functionName: '(empty-report)',
+                                isBlockCoverage: true,
+                            },
+                        ],
+                        scriptId: file,
+                        source: await fs_1.promises.readFile(file, 'utf-8'),
+                        url: url_1.default.pathToFileURL(file).toString(),
+                    },
+                ],
+            }, sourceMapResolver);
+        }));
+    }
+    startConversion(path, sourceMapResolver) {
+        __classPrivateFieldGet(this, _CoverageWorker_readyPromises, "f").push(this.convertFile(path, sourceMapResolver));
+    }
+    async convertFile(path, sourceMapResolver) {
+        const coverage = JSON.parse(await fs_1.promises.readFile(path, 'utf-8'));
+        await fs_1.promises.unlink(path);
+        await __classPrivateFieldGet(this, _CoverageWorker_instances, "m", _CoverageWorker_convert).call(this, coverage, sourceMapResolver);
     }
     reset() {
-        __classPrivateFieldGet(this, _CoverageWorker_queue, "f").length = 0;
+        __classPrivateFieldSet(this, _CoverageWorker_readyPromises, [], "f");
         __classPrivateFieldGet(this, _CoverageWorker_sources, "f").clear();
         __classPrivateFieldSet(this, _CoverageWorker_totalCoverage, { result: [] }, "f");
     }
-    async getTotalCoverage(sourceRoot, exclude) {
-        if (__classPrivateFieldGet(this, _CoverageWorker_queue, "f").length !== 0) {
-            // We're still running
-            await new Promise(resolve => (__classPrivateFieldSet(this, _CoverageWorker_markReady, resolve, "f")));
-        }
+    async getTotalCoverage(sourceRoot, exclude, rewritePath) {
+        await Promise.all(__classPrivateFieldGet(this, _CoverageWorker_readyPromises, "f"));
         const sourceMaps = new Map(await Promise.all(Array.from(__classPrivateFieldGet(this, _CoverageWorker_sourceMaps, "f"), ([url, promise]) => promise.then(map => [url, map]))));
-        return JSON.stringify(await (0, data_1.convertToIstanbulCoverage)(__classPrivateFieldGet(this, _CoverageWorker_totalCoverage, "f"), __classPrivateFieldGet(this, _CoverageWorker_sources, "f"), sourceMaps, exclude, sourceRoot));
+        return JSON.stringify(await (0, data_1.convertToIstanbulCoverage)(__classPrivateFieldGet(this, _CoverageWorker_totalCoverage, "f"), __classPrivateFieldGet(this, _CoverageWorker_sources, "f"), sourceMaps, exclude, sourceRoot, rewritePath));
     }
 }
-_CoverageWorker_queue = new WeakMap(), _CoverageWorker_sources = new WeakMap(), _CoverageWorker_sourceMaps = new WeakMap(), _CoverageWorker_totalCoverage = new WeakMap(), _CoverageWorker_markReady = new WeakMap(), _CoverageWorker_instances = new WeakSet(), _CoverageWorker_convert = async function _CoverageWorker_convert() {
-    var _a;
-    if (__classPrivateFieldGet(this, _CoverageWorker_queue, "f").length === 0) {
-        (_a = __classPrivateFieldGet(this, _CoverageWorker_markReady, "f")) === null || _a === void 0 ? void 0 : _a.call(this);
+_CoverageWorker_sources = new WeakMap(), _CoverageWorker_sourceMaps = new WeakMap(), _CoverageWorker_totalCoverage = new WeakMap(), _CoverageWorker_readyPromises = new WeakMap(), _CoverageWorker_instances = new WeakSet(), _CoverageWorker_convert = async function _CoverageWorker_convert(coverage, sourceMapResolver) {
+    if (!isProcessCov(coverage)) {
         return;
     }
     await macrotick(); // wait one tick to give the event loop some space to run
-    const [file] = __classPrivateFieldGet(this, _CoverageWorker_queue, "f");
-    const coverage = JSON.parse(await fs_1.promises.readFile(file, 'utf-8'));
-    await fs_1.promises.unlink(file);
-    if (isProcessCov(coverage)) {
-        for (const script of coverage.result) {
-            if (typeof script.source === 'string') {
-                if (__classPrivateFieldGet(this, _CoverageWorker_sources, "f").get(script.url) !== script.source) {
-                    __classPrivateFieldGet(this, _CoverageWorker_sources, "f").set(script.url, script.source);
-                    __classPrivateFieldGet(this, _CoverageWorker_sourceMaps, "f").set(script.url, (0, data_1.getSourceMap)(script.url, script.source));
-                }
-                delete script.source;
+    for (const script of coverage.result) {
+        if (typeof script.source === 'string') {
+            if (__classPrivateFieldGet(this, _CoverageWorker_sources, "f").get(script.url) !== script.source) {
+                __classPrivateFieldGet(this, _CoverageWorker_sources, "f").set(script.url, script.source);
+                __classPrivateFieldGet(this, _CoverageWorker_sourceMaps, "f").set(script.url, (0, data_1.getSourceMap)(script.url, script.source, sourceMapResolver));
             }
+            delete script.source;
         }
-        __classPrivateFieldSet(this, _CoverageWorker_totalCoverage, (0, v8_coverage_1.mergeProcessCovs)([__classPrivateFieldGet(this, _CoverageWorker_totalCoverage, "f"), coverage]), "f");
     }
-    __classPrivateFieldGet(this, _CoverageWorker_queue, "f").shift();
-    __classPrivateFieldGet(this, _CoverageWorker_instances, "m", _CoverageWorker_convert).call(this);
+    __classPrivateFieldSet(this, _CoverageWorker_totalCoverage, (0, v8_coverage_1.mergeProcessCovs)([__classPrivateFieldGet(this, _CoverageWorker_totalCoverage, "f"), coverage]), "f");
 };
 (0, comlink_1.expose)(new CoverageWorker(), (0, node_adapter_1.default)(worker_threads_1.parentPort));
 function isProcessCov(obj) {
@@ -90,4 +110,4 @@ function isProcessCov(obj) {
 function macrotick() {
     return new Promise(resolve => setTimeout(resolve));
 }
-//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1EQUEwRTtBQUUxRSxtREFBMEM7QUFDMUMscUNBQStCO0FBQy9CLGlGQUF5RDtBQUN6RCwyQkFBa0M7QUFDbEMsaUNBQStEO0FBRS9ELElBQUksMkJBQVUsSUFBSSxJQUFJLEVBQUU7SUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0NBQ2pFO0FBRUQsTUFBTSxjQUFjO0lBQXBCOztRQUNFOztXQUVHO1FBQ0gsZ0NBQW1CLEVBQUUsRUFBQztRQUV0QixrQ0FBVyxJQUFJLEdBQUcsRUFBa0IsRUFBQztRQUNyQyxxQ0FBYyxJQUFJLEdBQUcsRUFBaUQsRUFBQztRQUV2RSx3Q0FBNkIsRUFBQyxNQUFNLEVBQUUsRUFBRSxFQUFDLEVBQUM7UUFFMUMsNENBQXdCO0lBNkUxQixDQUFDO0lBM0VDLGVBQWUsQ0FBQyxJQUFZO1FBQzFCLHVCQUFBLElBQUksNkJBQU8sQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFdkIsSUFBSSx1QkFBQSxJQUFJLDZCQUFPLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUM1Qix1QkFBQSxJQUFJLDBEQUFTLE1BQWIsSUFBSSxDQUFXLENBQUM7U0FDakI7SUFDSCxDQUFDO0lBRUQsS0FBSztRQUNILHVCQUFBLElBQUksNkJBQU8sQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZCLHVCQUFBLElBQUksK0JBQVMsQ0FBQyxLQUFLLEVBQUUsQ0FBQztRQUN0Qix1QkFBQSxJQUFJLGlDQUFrQixFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUMsTUFBQSxDQUFDO0lBQ3JDLENBQUM7SUF1Q0QsS0FBSyxDQUFDLGdCQUFnQixDQUFDLFVBQWtCLEVBQUUsT0FBMEI7UUFDbkUsSUFBSSx1QkFBQSxJQUFJLDZCQUFPLENBQUMs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
\ No newline at end of file
+//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoid29ya2VyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vc3JjL3dvcmtlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLG1EQUEwRTtBQUUxRSxtREFBMEM7QUFDMUMscUNBQTRDO0FBQzVDLCtCQUEwQjtBQUMxQixpRkFBeUQ7QUFDekQsMkJBQWtDO0FBQ2xDLGdEQUF3QjtBQUN4Qiw4Q0FBc0I7QUFDdEIsaUNBSWdCO0FBR2hCLElBQUksMkJBQVUsSUFBSSxJQUFJLEVBQUU7SUFDdEIsTUFBTSxJQUFJLEtBQUssQ0FBQyw4Q0FBOEMsQ0FBQyxDQUFDO0NBQ2pFO0FBRUQsTUFBTSxjQUFjO0lBQXBCO1FBQ0U7O1dBRUc7UUFDSCx5QkFBeUI7O1FBRXpCLGtDQUFXLElBQUksR0FBRyxFQUFrQixFQUFDO1FBQ3JDLHFDQUFjLElBQUksR0FBRyxFQUFpRCxFQUFDO1FBRXZFLHdDQUE2QixFQUFDLE1BQU0sRUFBRSxFQUFFLEVBQUMsRUFBQztRQUUxQyx3Q0FBa0MsRUFBRSxFQUFDO0lBNEd2QyxDQUFDO0lBMUdDLEtBQUssQ0FBQyxPQUFPLENBQ1gsS0FBd0IsRUFDeEIsVUFBa0IsRUFDbEIsaUJBQXFDO1FBRXJDLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBQSxXQUFJLEVBQ3RCLEtBQUssQ0FBQyxHQUFHLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxjQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQyxDQUNoRSxDQUFDO1FBQ0YsdUJBQUEsSUFBSSxxQ0FBZSxDQUFDLElBQUksQ0FDdEIsR0FBRyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUssRUFBQyxJQUFJLEVBQUMsRUFBRTtZQUN4QixNQUFNLHVCQUFBLElBQUksMERBQVMsTUFBYixJQUFJLEVBQ1I7Z0JBQ0UsTUFBTSxFQUFFO29CQUNOO3dCQUNFLFNBQVMsRUFBRTs0QkFDVDtnQ0FDRSxNQUFNLEVBQUU7b0NBQ047d0NB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
\ No newline at end of file
diff --git a/package.json b/package.json
index c303e0b56178a096568a786f6ee1484268407b5e..03dd80a22d237ad496da7a7499f242b2bf1571d5 100644
--- a/package.json
+++ b/package.json
@@ -42,6 +42,7 @@
   "dependencies": {
     "@bcoe/v8-coverage": "^0.2.3",
     "comlink": "^4.3.1",
+    "glob": "^10.3.10",
     "istanbul-lib-coverage": "^3.0.0",
     "istanbul-lib-report": "^3.0.0",
     "istanbul-reports": "^3.0.2",
diff --git a/src/data.ts b/src/data.ts
index 51fd8ac10bf8f47c43a2a7c3140bad45fe10b1fb..0bf97e18557ce4910af99f601f3323acb9cbf6c4 100644
--- a/src/data.ts
+++ b/src/data.ts
@@ -2,14 +2,21 @@ import type {ProcessCov} from '@bcoe/v8-coverage';
 import type {EncodedSourceMap} from '@jridgewell/trace-mapping';
 import type {Suite, TestResult} from '@playwright/test/reporter';
 import {promises as fs} from 'fs';
+import type {RewritePath} from './reporter';
 import {createCoverageMap} from 'istanbul-lib-coverage';
 import {isMatch} from 'micromatch';
 import {posix} from 'path';
 import {pathToFileURL, URL} from 'url';
 import v8ToIstanbul from 'v8-to-istanbul';
+import type {ProxyMarked} from 'comlink';
 
 export const attachmentName = '@bgotink/playwright-coverage';
 
+export type SourceMapResolver = (opts: {
+  url: string;
+  mappedUrl?: string;
+}) => Promise<string>;
+
 export function collectV8CoverageFiles(suite: Suite) {
   const files = new Set<string>();
 
@@ -43,16 +50,18 @@ const fetch = eval('import("node-fetch")') as Promise<
 export async function getSourceMap(
   url: string,
   source: string,
+  sourceMapResolver?: SourceMapResolver,
 ): Promise<EncodedSourceMap | undefined> {
   const match = source.match(/\/\/# *sourceMappingURL=(.*)/);
 
   if (match == null) {
     try {
+      const resolvedUrl = sourceMapResolver
+        ? await sourceMapResolver({url})
+        : `${url}.map`;
       const response = await (
         await fetch
-      ).default(`${url}.map`, {
-        method: 'GET',
-      });
+      ).default(resolvedUrl, {method: 'GET'});
 
       return (await response.json()) as EncodedSourceMap;
     } catch {
@@ -60,7 +69,9 @@ export async function getSourceMap(
     }
   }
 
-  const resolved = new URL(match[1]!, url);
+  const resolved = sourceMapResolver
+    ? new URL(await sourceMapResolver({url, mappedUrl: match[1]}))
+    : new URL(match[1]!, url);
 
   try {
     switch (resolved.protocol) {
@@ -100,13 +111,14 @@ export async function getSourceMap(
 
 export async function getSourceMaps(
   sources: ReadonlyMap<string, string>,
+  sourceMapResolver?: SourceMapResolver,
 ): Promise<ReadonlyMap<string, EncodedSourceMap | undefined>> {
   return new Map<string, EncodedSourceMap | undefined>(
     await Promise.all(
       Array.from(
         sources,
         async ([url, source]) =>
-          [url, await getSourceMap(url, source)] as const,
+          [url, await getSourceMap(url, source, sourceMapResolver)] as const,
       ),
     ),
   );
@@ -118,6 +130,7 @@ export async function convertToIstanbulCoverage(
   sourceMaps: ReadonlyMap<string, EncodedSourceMap | undefined>,
   exclude: readonly string[],
   sourceRoot: string,
+  rewritePath: RewritePath & ProxyMarked,
 ) {
   const istanbulCoverage = createCoverageMap({});
 
@@ -164,7 +177,19 @@ export async function convertToIstanbulCoverage(
       0,
       {
         source,
-        sourceMap: {sourcemap: sourceMap},
+        sourceMap: {
+          sourcemap: {
+            ...sourceMap,
+            sourceRoot,
+            sources: await Promise.all(
+              sourceMap.sources
+                .filter(Boolean)
+                .map(relativePath =>
+                  rewritePath({relativePath: relativePath!, absolutePath: ''}),
+                ),
+            ),
+          },
+        },
       },
       path => {
         let isExcluded = isExcludedCache.get(path);
diff --git a/src/reporter.ts b/src/reporter.ts
index 44961f9a665febeb9e1e8dd00601773e17be792f..9cc5ccf9b0a46cbab1ccc9e411a40b66304f7d12 100644
--- a/src/reporter.ts
+++ b/src/reporter.ts
@@ -4,7 +4,7 @@ import type {
   Reporter,
   TestResult,
 } from '@playwright/test/reporter';
-import {Remote, wrap} from 'comlink';
+import {Remote, wrap, proxy} from 'comlink';
 import nodeEndpoint from 'comlink/dist/umd/node-adapter';
 import {readFileSync} from 'fs';
 import {CoverageMapData, createCoverageMap} from 'istanbul-lib-coverage';
@@ -13,13 +13,23 @@ import {create, ReportType, ReportOptions} from 'istanbul-reports';
 import path from 'path';
 import {Worker} from 'worker_threads';
 
-import {attachmentName} from './data.js';
+import {attachmentName, SourceMapResolver} from './data.js';
 import type {CoverageWorker} from './worker.js';
 
+export type RewritePath = (file: {
+  relativePath: string;
+  absolutePath: string;
+}) => string;
+
 /**
  * Options to the coverage repoter
  */
 export interface CoverageReporterOptions {
+  /**
+   * Glob(s) defining file(s) to include in coverage tracking
+   */
+  include?: string | string[];
+
   /**
    * Glob(s) defining file(s) to exclude from coverage tracking
    */
@@ -58,11 +68,16 @@ export interface CoverageReporterOptions {
    *
    * If no function is passed, the absolute path passed into this function is used.
    */
-  rewritePath?: (file: {relativePath: string; absolutePath: string}) => string;
+  rewritePath?: RewritePath;
+
+  sourceMapResolver?: SourceMapResolver;
 }
 
+const defaultRewritePath: RewritePath = ({relativePath}) => relativePath;
+
 export class CoverageReporter implements Reporter {
   private readonly exclude: readonly string[];
+  private readonly include: readonly string[];
   private readonly resultDir: string;
   private readonly reports: (
     | ReportType
@@ -74,23 +89,28 @@ export class CoverageReporter implements Reporter {
 
   private readonly workerInstance: Worker;
   private readonly worker: Remote<CoverageWorker>;
+  private readonly sourceMapResolver?: SourceMapResolver;
 
   private config!: FullConfig;
 
   constructor({
+    include,
     exclude,
     sourceRoot,
     resultDir,
     reports = ['text-summary'],
     watermarks,
     rewritePath,
+    sourceMapResolver,
   }: CoverageReporterOptions = {}) {
     this.exclude = typeof exclude === 'string' ? [exclude] : exclude ?? [];
+    this.include = typeof include === 'string' ? [include] : include ?? [];
     this.resultDir = resultDir || 'coverage';
     this.reports = reports;
     this.sourceRoot = sourceRoot;
     this.watermarks = watermarks;
     this.rewritePath = rewritePath;
+    this.sourceMapResolver = sourceMapResolver;
 
     this.workerInstance = new Worker(require.resolve('./worker.js'));
     this.worker = wrap<CoverageWorker>(nodeEndpoint(this.workerInstance));
@@ -98,8 +118,15 @@ export class CoverageReporter implements Reporter {
 
   onBegin(config: FullConfig): void {
     this.config = config;
-
     void this.worker.reset();
+    if (this.include) {
+      const sourceRoot = this.sourceRoot ?? this.config.rootDir;
+      this.worker.include(
+        this.include,
+        sourceRoot,
+        proxy(this.sourceMapResolver),
+      );
+    }
   }
 
   onTestEnd(_: unknown, result: TestResult): void {
@@ -111,7 +138,10 @@ export class CoverageReporter implements Reporter {
       const [attachment] = result.attachments.splice(attachmentIndex, 1);
 
       if (attachment?.path != null) {
-        void this.worker.startConversion(attachment.path);
+        void this.worker.startConversion(
+          attachment.path,
+          proxy(this.sourceMapResolver),
+        );
       }
     }
   }
@@ -127,7 +157,11 @@ export class CoverageReporter implements Reporter {
       Object.fromEntries(
         Object.entries(
           JSON.parse(
-            await this.worker.getTotalCoverage(sourceRoot, this.exclude),
+            await this.worker.getTotalCoverage(
+              sourceRoot,
+              this.exclude,
+              proxy(this.rewritePath || defaultRewritePath),
+            ),
           ) as CoverageMapData,
         ).map(([relativePath, data]) => {
           const absolutePath = path.resolve(sourceRoot, relativePath);
diff --git a/src/worker.ts b/src/worker.ts
index 2b00c7eb15efa950e49c0fb8ab46d49e33bb4047..9c95a7824f018abba36ee6ea6c6b62eaa04de9c0 100644
--- a/src/worker.ts
+++ b/src/worker.ts
@@ -1,10 +1,18 @@
 import {mergeProcessCovs, ProcessCov, ScriptCov} from '@bcoe/v8-coverage';
 import type {EncodedSourceMap} from '@jridgewell/trace-mapping';
 import {parentPort} from 'worker_threads';
-import {expose} from 'comlink';
+import {expose, ProxyMarked} from 'comlink';
+import {glob} from 'glob';
 import nodeEndpoint from 'comlink/dist/umd/node-adapter';
 import {promises as fs} from 'fs';
-import {convertToIstanbulCoverage, getSourceMap} from './data';
+import path from 'path';
+import url from 'url';
+import {
+  convertToIstanbulCoverage,
+  getSourceMap,
+  SourceMapResolver,
+} from './data';
+import type {RewritePath} from './reporter';
 
 if (parentPort == null) {
   throw new Error('This script is meant to run as worker thread');
@@ -14,71 +22,101 @@ class CoverageWorker {
   /**
    * Invariant: if #queue.length > 0, conversion is active
    */
-  #queue: string[] = [];
+  // #queue: string[] = [];
 
   #sources = new Map<string, string>();
   #sourceMaps = new Map<string, Promise<EncodedSourceMap | undefined>>();
 
   #totalCoverage: ProcessCov = {result: []};
 
-  #markReady?: () => void;
+  #readyPromises: Promise<void>[] = [];
 
-  startConversion(path: string) {
-    this.#queue.push(path);
+  async include(
+    globs: readonly string[],
+    sourceRoot: string,
+    sourceMapResolver?: SourceMapResolver,
+  ) {
+    const files = await glob(
+      globs.map(globPattern => path.resolve(sourceRoot, globPattern)),
+    );
+    this.#readyPromises.push(
+      ...files.map(async file => {
+        await this.#convert(
+          {
+            result: [
+              {
+                functions: [
+                  {
+                    ranges: [
+                      {
+                        startOffset: 0,
+                        endOffset: Infinity,
+                        count: 0,
+                      },
+                    ],
+                    functionName: '(empty-report)',
+                    isBlockCoverage: true,
+                  },
+                ],
+                scriptId: file,
+                source: await fs.readFile(file, 'utf-8'),
+                url: url.pathToFileURL(file).toString(),
+              },
+            ],
+          },
+          sourceMapResolver,
+        );
+      }),
+    );
+  }
 
-    if (this.#queue.length === 1) {
-      this.#convert();
-    }
+  startConversion(path: string, sourceMapResolver?: SourceMapResolver) {
+    this.#readyPromises.push(this.convertFile(path, sourceMapResolver));
+  }
+
+  async convertFile(path: string, sourceMapResolver?: SourceMapResolver) {
+    const coverage: ProcessCov = JSON.parse(await fs.readFile(path, 'utf-8'));
+    await fs.unlink(path);
+    await this.#convert(coverage, sourceMapResolver);
   }
 
   reset() {
-    this.#queue.length = 0;
+    this.#readyPromises = [];
     this.#sources.clear();
     this.#totalCoverage = {result: []};
   }
 
-  async #convert() {
-    if (this.#queue.length === 0) {
-      this.#markReady?.();
+  async #convert(
+    coverage: {result: (ScriptCov & {source?: string})[]},
+    sourceMapResolver?: SourceMapResolver,
+  ) {
+    if (!isProcessCov(coverage)) {
       return;
     }
-
     await macrotick(); // wait one tick to give the event loop some space to run
-
-    const [file] = this.#queue as [string, ...string[]];
-
-    const coverage: unknown = JSON.parse(await fs.readFile(file, 'utf-8'));
-    await fs.unlink(file);
-
-    if (isProcessCov(coverage)) {
-      for (const script of coverage.result as (ScriptCov & {
-        source?: string;
-      })[]) {
-        if (typeof script.source === 'string') {
-          if (this.#sources.get(script.url) !== script.source) {
-            this.#sources.set(script.url, script.source);
-            this.#sourceMaps.set(
-              script.url,
-              getSourceMap(script.url, script.source),
-            );
-          }
-
-          delete script.source;
+    for (const script of coverage.result) {
+      if (typeof script.source === 'string') {
+        if (this.#sources.get(script.url) !== script.source) {
+          this.#sources.set(script.url, script.source);
+          this.#sourceMaps.set(
+            script.url,
+            getSourceMap(script.url, script.source, sourceMapResolver),
+          );
         }
-      }
 
-      this.#totalCoverage = mergeProcessCovs([this.#totalCoverage, coverage]);
+        delete script.source;
+      }
     }
 
-    this.#queue.shift();
-    this.#convert();
+    this.#totalCoverage = mergeProcessCovs([this.#totalCoverage, coverage]);
   }
 
-  async getTotalCoverage(sourceRoot: string, exclude: readonly string[]) {
-    if (this.#queue.length !== 0) {
-      // We're still running
-      await new Promise<void>(resolve => (this.#markReady = resolve));
-    }
+  async getTotalCoverage(
+    sourceRoot: string,
+    exclude: readonly string[],
+    rewritePath: RewritePath & ProxyMarked,
+  ) {
+    await Promise.all(this.#readyPromises);
 
     const sourceMaps = new Map(
       await Promise.all(
@@ -95,6 +133,7 @@ class CoverageWorker {
         sourceMaps,
         exclude,
         sourceRoot,
+        rewritePath,
       ),
     );
   }
