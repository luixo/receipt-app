diff --git a/dist/createTRPCNext.d.ts b/dist/createTRPCNext.d.ts
index bb39e35c9751ce9b3795e924771f03e416bcc9b5..549dc179500fdac5f1c51ae54365ce1b2cbbaaa2 100644
--- a/dist/createTRPCNext.d.ts
+++ b/dist/createTRPCNext.d.ts
@@ -24,5 +24,5 @@ export interface CreateTRPCNextBase<TRouter extends AnyRouter, TSSRContext exten
  * @internal
  */
 export type CreateTRPCNext<TRouter extends AnyRouter, TSSRContext extends NextPageContext, TFlags> = ProtectedIntersection<CreateTRPCNextBase<TRouter, TSSRContext>, DecoratedProcedureRecord<TRouter['_def']['_config'], TRouter['_def']['record'], TFlags>>;
-export declare function createTRPCNext<TRouter extends AnyRouter, TSSRContext extends NextPageContext = NextPageContext, TFlags = null>(opts: WithTRPCNoSSROptions<TRouter> | WithTRPCSSROptions<TRouter>): CreateTRPCNext<TRouter, TSSRContext, TFlags>;
+export declare function createTRPCNext<TRouter extends AnyRouter, TServerSideContext = null, TSSRContext extends NextPageContext = NextPageContext, TFlags = null>(opts: WithTRPCNoSSROptions<TRouter, TServerSideContext, TSSRContext> | WithTRPCSSROptions<TRouter, TServerSideContext, TSSRContext>): CreateTRPCNext<TRouter, TSSRContext, TFlags>;
 //# sourceMappingURL=createTRPCNext.d.ts.map
\ No newline at end of file
diff --git a/dist/createTRPCNext.d.ts.map b/dist/createTRPCNext.d.ts.map
index 5a0a4b3b40a05aacd4d5999bfb0e548dd8ac0f22..03b894a36c9aeb29cff4ced8e45a4109cda6ce07 100644
--- a/dist/createTRPCNext.d.ts.map
+++ b/dist/createTRPCNext.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"createTRPCNext.d.ts","sourceRoot":"","sources":["../src/createTRPCNext.tsx"],"names":[],"mappings":"AAEA,OAAO,EAGL,gBAAgB,EAEhB,wBAAwB,EACxB,cAAc,EACf,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAEzC,OAAO,EAAE,qBAAqB,EAAE,MAAM,sCAAsC,CAAC;AAC7E,OAAO,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAE7C,OAAO,EAAE,QAAQ,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,MAAM,YAAY,CAAC;AAEhF;;GAEG;AACH,MAAM,WAAW,kBAAkB,CACjC,OAAO,SAAS,SAAS,EACzB,WAAW,SAAS,eAAe;IAEnC;;;;OAIG;IACH,UAAU,IAAI,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IACrD;;OAEG;IACH,QAAQ,IAAI,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IACnD,QAAQ,EAAE,UAAU,CAAC,OAAO,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;IAC5D,UAAU,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;CACrC;AAED;;GAEG;AACH,MAAM,MAAM,cAAc,CACxB,OAAO,SAAS,SAAS,EACzB,WAAW,SAAS,eAAe,EACnC,MAAM,IACJ,qBAAqB,CACvB,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,EACxC,wBAAwB,CACtB,OAAO,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,EAC1B,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,EACzB,MAAM,CACP,CACF,CAAC;AAEF,wBAAgB,cAAc,CAC5B,OAAO,SAAS,SAAS,EACzB,WAAW,SAAS,eAAe,GAAG,eAAe,EACrD,MAAM,GAAG,IAAI,EAEb,IAAI,EAAE,oBAAoB,CAAC,OAAO,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,GAChE,cAAc,CAAC,OAAO,EAAE,WAAW,EAAE,MAAM,CAAC,CA2B9C"}
\ No newline at end of file
+{"version":3,"file":"createTRPCNext.d.ts","sourceRoot":"","sources":["../src/createTRPCNext.tsx"],"names":[],"mappings":"AAEA,OAAO,EAGL,gBAAgB,EAEhB,wBAAwB,EACxB,cAAc,EACf,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAEzC,OAAO,EAAE,qBAAqB,EAAE,MAAM,sCAAsC,CAAC;AAC7E,OAAO,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAE7C,OAAO,EAAE,QAAQ,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,MAAM,YAAY,CAAC;AAEhF;;GAEG;AACH,MAAM,WAAW,kBAAkB,CACjC,OAAO,SAAS,SAAS,EACzB,WAAW,SAAS,eAAe;IAEnC;;;;OAIG;IACH,UAAU,IAAI,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IACrD;;OAEG;IACH,QAAQ,IAAI,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC;IACnD,QAAQ,EAAE,UAAU,CAAC,OAAO,QAAQ,CAAC,OAAO,EAAE,WAAW,CAAC,CAAC,CAAC;IAC5D,UAAU,EAAE,cAAc,CAAC,OAAO,CAAC,CAAC;CACrC;AAED;;GAEG;AACH,MAAM,MAAM,cAAc,CACxB,OAAO,SAAS,SAAS,EACzB,WAAW,SAAS,eAAe,EACnC,MAAM,IACJ,qBAAqB,CACvB,kBAAkB,CAAC,OAAO,EAAE,WAAW,CAAC,EACxC,wBAAwB,CACtB,OAAO,CAAC,MAAM,CAAC,CAAC,SAAS,CAAC,EAC1B,OAAO,CAAC,MAAM,CAAC,CAAC,QAAQ,CAAC,EACzB,MAAM,CACP,CACF,CAAC;AAEF,wBAAgB,cAAc,CAC5B,OAAO,SAAS,SAAS,EACzB,kBAAkB,GAAG,IAAI,EACzB,WAAW,SAAS,eAAe,GAAG,eAAe,EACrD,MAAM,GAAG,IAAI,EAEb,IAAI,EACA,oBAAoB,CAAC,OAAO,EAAE,kBAAkB,EAAE,WAAW,CAAC,GAC9D,kBAAkB,CAAC,OAAO,EAAE,kBAAkB,EAAE,WAAW,CAAC,GAC/D,cAAc,CAAC,OAAO,EAAE,WAAW,EAAE,MAAM,CAAC,CA2B9C"}
\ No newline at end of file
diff --git a/dist/index.js b/dist/index.js
index 66c9cf9e414f5b5ef5e0886b6b0b9ce4e534fb5a..d85a8fae39e66ca3e5fccfdca6b357832f3fd7f0 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -32,16 +32,34 @@ function transformQueryOrMutationCacheErrors(result) {
     }
     return result;
 }
+const waitUntilNoObservers = (queryClient)=>new Promise((resolve)=>{
+        const unsub = queryClient.getQueryCache().subscribe((event)=>{
+            if (event?.query.getObserversCount() === 0) {
+                resolve();
+                unsub();
+            }
+        });
+    });
+const awaitUntilResolved = async ({ queryClient ,  })=>{
+    if (!queryClient.isFetching()) {
+        // the render didn't cause the queryClient to fetch anything
+        return true;
+    }
+    await waitUntilNoObservers(queryClient);
+    return false;
+};
 function withTRPC(opts) {
-    const { config: getClientConfig  } = opts;
+    const { config: getClientConfig , serverSideContext: getServerSideContext = ()=>null , awaitPrepassRender =awaitUntilResolved ,  } = opts;
     return (AppOrPage)=>{
         const trpc = shared.createRootHooks(opts);
-        const WithTRPC = (props)=>{
+        const WithTRPC = ({ serverSideContext , ...props })=>{
             const [prepassProps] = React.useState(()=>{
                 if (props.trpc) {
                     return props.trpc;
                 }
-                const config = getClientConfig({});
+                const config = getClientConfig({
+                    serverSideContext
+                });
                 const queryClient = shared.getQueryClient(config);
                 const trpcClient = trpc.createClient(config);
                 return {
@@ -99,13 +117,16 @@ function withTRPC(opts) {
                         ...pageProps
                     };
                 }
+                const serverSideContext = getServerSideContext(ctx);
                 const getAppTreeProps = (props)=>isApp ? {
-                        pageProps: props
+                        pageProps: props,
+                        serverSideContext
                     } : props;
                 if (typeof window !== 'undefined' || !ssr) {
                     return getAppTreeProps(pageProps);
                 }
                 const config = getClientConfig({
+                    serverSideContext,
                     ctx
                 });
                 const trpcClient = client.createTRPCUntypedClient(config);
@@ -126,18 +147,14 @@ function withTRPC(opts) {
                 while(true){
                     // render full tree
                     await ssrPrepass__default["default"](/*#__PURE__*/ React.createElement(AppTree, prepassProps));
-                    if (!queryClient.isFetching()) {
-                        break;
-                    }
                     // wait until the query cache has settled it's promises
-                    await new Promise((resolve)=>{
-                        const unsub = queryClient.getQueryCache().subscribe((event)=>{
-                            if (event?.query.getObserversCount() === 0) {
-                                resolve();
-                                unsub();
-                            }
-                        });
+                    const isResolved = await awaitPrepassRender({
+                        queryClient,
+                        ctx: ctx
                     });
+                    if (isResolved) {
+                        break;
+                    }
                 }
                 const dehydratedCache = reactQuery.dehydrate(queryClient, {
                     shouldDehydrateQuery () {
@@ -210,4 +227,5 @@ function createTRPCNext(opts) {
 }
 
 exports.createTRPCNext = createTRPCNext;
+exports.waitUntilNoObservers = waitUntilNoObservers;
 exports.withTRPC = withTRPC;
diff --git a/dist/index.mjs b/dist/index.mjs
index 864664df912d4739f885904f8f98a9420919ebcf..58340c8c939dcf82e84e77110d82b11df9d42ce7 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -23,16 +23,34 @@ function transformQueryOrMutationCacheErrors(result) {
     }
     return result;
 }
+const waitUntilNoObservers = (queryClient)=>new Promise((resolve)=>{
+        const unsub = queryClient.getQueryCache().subscribe((event)=>{
+            if (event?.query.getObserversCount() === 0) {
+                resolve();
+                unsub();
+            }
+        });
+    });
+const awaitUntilResolved = async ({ queryClient ,  })=>{
+    if (!queryClient.isFetching()) {
+        // the render didn't cause the queryClient to fetch anything
+        return true;
+    }
+    await waitUntilNoObservers(queryClient);
+    return false;
+};
 function withTRPC(opts) {
-    const { config: getClientConfig  } = opts;
+    const { config: getClientConfig , serverSideContext: getServerSideContext = ()=>null , awaitPrepassRender =awaitUntilResolved ,  } = opts;
     return (AppOrPage)=>{
         const trpc = createRootHooks(opts);
-        const WithTRPC = (props)=>{
+        const WithTRPC = ({ serverSideContext , ...props })=>{
             const [prepassProps] = useState(()=>{
                 if (props.trpc) {
                     return props.trpc;
                 }
-                const config = getClientConfig({});
+                const config = getClientConfig({
+                    serverSideContext
+                });
                 const queryClient = getQueryClient(config);
                 const trpcClient = trpc.createClient(config);
                 return {
@@ -90,13 +108,16 @@ function withTRPC(opts) {
                         ...pageProps
                     };
                 }
+                const serverSideContext = getServerSideContext(ctx);
                 const getAppTreeProps = (props)=>isApp ? {
-                        pageProps: props
+                        pageProps: props,
+                        serverSideContext
                     } : props;
                 if (typeof window !== 'undefined' || !ssr) {
                     return getAppTreeProps(pageProps);
                 }
                 const config = getClientConfig({
+                    serverSideContext,
                     ctx
                 });
                 const trpcClient = createTRPCUntypedClient(config);
@@ -117,18 +138,14 @@ function withTRPC(opts) {
                 while(true){
                     // render full tree
                     await ssrPrepass(/*#__PURE__*/ createElement(AppTree, prepassProps));
-                    if (!queryClient.isFetching()) {
-                        break;
-                    }
                     // wait until the query cache has settled it's promises
-                    await new Promise((resolve)=>{
-                        const unsub = queryClient.getQueryCache().subscribe((event)=>{
-                            if (event?.query.getObserversCount() === 0) {
-                                resolve();
-                                unsub();
-                            }
-                        });
+                    const isResolved = await awaitPrepassRender({
+                        queryClient,
+                        ctx: ctx
                     });
+                    if (isResolved) {
+                        break;
+                    }
                 }
                 const dehydratedCache = dehydrate(queryClient, {
                     shouldDehydrateQuery () {
@@ -200,4 +217,4 @@ function createTRPCNext(opts) {
     });
 }
 
-export { createTRPCNext, withTRPC };
+export { createTRPCNext, waitUntilNoObservers, withTRPC };
diff --git a/dist/withTRPC.d.ts b/dist/withTRPC.d.ts
index 2475452b66e29de66c238a01bd64fae26737c1ed..697a83ac8708ab8bf0756d726d269c0fdec37aa3 100644
--- a/dist/withTRPC.d.ts
+++ b/dist/withTRPC.d.ts
@@ -1,3 +1,8 @@
+/**
+ * Heavily based on urql's ssr
+ * https://github.com/FormidableLabs/urql/blob/main/packages/next-urql/src/with-urql-client.ts
+ */
+import { QueryClient } from '@tanstack/react-query';
 import { CreateTRPCClientOptions } from '@trpc/client';
 import { TRPCClientError } from '@trpc/react-query';
 import { CreateTRPCReactOptions, CreateTRPCReactQueryClientConfig } from '@trpc/react-query/shared';
@@ -7,12 +12,21 @@ import { NextComponentType, NextPageContext } from 'next/dist/shared/lib/utils';
 export type WithTRPCConfig<TRouter extends AnyRouter> = CreateTRPCClientOptions<TRouter> & CreateTRPCReactQueryClientConfig & {
     abortOnUnmount?: boolean;
 };
-interface WithTRPCOptions<TRouter extends AnyRouter> extends CreateTRPCReactOptions<TRouter> {
+type AwaitPrepassRender<TSSRContext extends NextPageContext = NextPageContext> = (opts: {
+    queryClient: QueryClient;
+    ctx: TSSRContext;
+}) => Promise<boolean>;
+interface WithTRPCOptions<TRouter extends AnyRouter, TServerSideContext, TSSRContext extends NextPageContext = NextPageContext> extends CreateTRPCReactOptions<TRouter> {
     config: (info: {
+        serverSideContext: TServerSideContext;
         ctx?: NextPageContext;
     }) => WithTRPCConfig<TRouter>;
+    awaitPrepassRender?: AwaitPrepassRender<TSSRContext>;
 }
-export interface WithTRPCSSROptions<TRouter extends AnyRouter> extends WithTRPCOptions<TRouter> {
+interface WithTRPCServerSideContextOptions<TRouter extends AnyRouter, TServerSideContext, TSSRContext extends NextPageContext = NextPageContext> extends WithTRPCOptions<TRouter, TServerSideContext, TSSRContext> {
+    serverSideContext?: (ctx: NextPageContext) => TServerSideContext;
+}
+export interface WithTRPCSSROptions<TRouter extends AnyRouter, TServerSideContext, TSSRContext extends NextPageContext = NextPageContext> extends WithTRPCServerSideContextOptions<TRouter, TServerSideContext, TSSRContext> {
     ssr: true | ((opts: {
         ctx: NextPageContext;
     }) => boolean | Promise<boolean>);
@@ -21,9 +35,10 @@ export interface WithTRPCSSROptions<TRouter extends AnyRouter> extends WithTRPCO
         clientErrors: TRPCClientError<TRouter>[];
     }) => ResponseMeta;
 }
-export interface WithTRPCNoSSROptions<TRouter extends AnyRouter> extends WithTRPCOptions<TRouter> {
+export interface WithTRPCNoSSROptions<TRouter extends AnyRouter, TServerSideContext, TSSRContext extends NextPageContext = NextPageContext> extends WithTRPCServerSideContextOptions<TRouter, TServerSideContext, TSSRContext> {
     ssr?: false;
 }
-export declare function withTRPC<TRouter extends AnyRouter, TSSRContext extends NextPageContext = NextPageContext>(opts: WithTRPCNoSSROptions<TRouter> | WithTRPCSSROptions<TRouter>): (AppOrPage: NextComponentType<any, any, any>) => NextComponentType;
+export declare const waitUntilNoObservers: (queryClient: QueryClient) => Promise<void>;
+export declare function withTRPC<TRouter extends AnyRouter, TServerSideContext = null, TSSRContext extends NextPageContext = NextPageContext>(opts: WithTRPCNoSSROptions<TRouter, TServerSideContext, TSSRContext> | WithTRPCSSROptions<TRouter, TServerSideContext, TSSRContext>): (AppOrPage: NextComponentType<any, any, any>) => NextComponentType;
 export {};
 //# sourceMappingURL=withTRPC.d.ts.map
\ No newline at end of file
diff --git a/dist/withTRPC.d.ts.map b/dist/withTRPC.d.ts.map
index fe15e21f8ad128c33b4a804fc7833fa7f726c5ea..b47625ecaed140170739ff72eaf491245670d878 100644
--- a/dist/withTRPC.d.ts.map
+++ b/dist/withTRPC.d.ts.map
@@ -1 +1 @@
-{"version":3,"file":"withTRPC.d.ts","sourceRoot":"","sources":["../src/withTRPC.tsx"],"names":[],"mappings":"AAWA,OAAO,EACL,uBAAuB,EAGxB,MAAM,cAAc,CAAC;AACtB,OAAO,EAAE,eAAe,EAAuB,MAAM,mBAAmB,CAAC;AACzE,OAAO,EAEL,sBAAsB,EACtB,gCAAgC,EAEjC,MAAM,0BAA0B,CAAC;AAClC,OAAO,KAAK,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AAC9C,OAAO,KAAK,EAAE,YAAY,EAAE,MAAM,mBAAmB,CAAC;AAEtD,OAAO,EAGL,iBAAiB,EACjB,eAAe,EAChB,MAAM,4BAA4B,CAAC;AA2BpC,MAAM,MAAM,cAAc,CAAC,OAAO,SAAS,SAAS,IAClD,uBAAuB,CAAC,OAAO,CAAC,GAC9B,gCAAgC,GAAG;IACjC,cAAc,CAAC,EAAE,OAAO,CAAC;CAC1B,CAAC;AAEN,UAAU,eAAe,CAAC,OAAO,SAAS,SAAS,CACjD,SAAQ,sBAAsB,CAAC,OAAO,CAAC;IACvC,MAAM,EAAE,CAAC,IAAI,EAAE;QAAE,GAAG,CAAC,EAAE,eAAe,CAAA;KAAE,KAAK,cAAc,CAAC,OAAO,CAAC,CAAC;CACtE;AAED,MAAM,WAAW,kBAAkB,CAAC,OAAO,SAAS,SAAS,CAC3D,SAAQ,eAAe,CAAC,OAAO,CAAC;IAChC,GAAG,EAAE,IAAI,GAAG,CAAC,CAAC,IAAI,EAAE;QAAE,GAAG,EAAE,eAAe,CAAA;KAAE,KAAK,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;IAC7E,YAAY,CAAC,EAAE,CAAC,IAAI,EAAE;QACpB,GAAG,EAAE,eAAe,CAAC;QACrB,YAAY,EAAE,eAAe,CAAC,OAAO,CAAC,EAAE,CAAC;KAC1C,KAAK,YAAY,CAAC;CACpB;AACD,MAAM,WAAW,oBAAoB,CAAC,OAAO,SAAS,SAAS,CAC7D,SAAQ,eAAe,CAAC,OAAO,CAAC;IAChC,GAAG,CAAC,EAAE,KAAK,CAAC;CACb;AAED,wBAAgB,QAAQ,CACtB,OAAO,SAAS,SAAS,EACzB,WAAW,SAAS,eAAe,GAAG,eAAe,EACrD,IAAI,EAAE,oBAAoB,CAAC,OAAO,CAAC,GAAG,kBAAkB,CAAC,OAAO,CAAC,eAU9C,kBAAkB,GAAG,EAAE,GAAG,EAAE,GAAG,CAAC,KAAG,iBAAiB,CAgMxE"}
\ No newline at end of file
+{"version":3,"file":"withTRPC.d.ts","sourceRoot":"","sources":["../src/withTRPC.tsx"],"names":[],"mappings":"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"}
\ No newline at end of file
diff --git a/src/createTRPCNext.tsx b/src/createTRPCNext.tsx
index 2505bf63e20a8bba7d0c672a5cccef680f821f20..1c6159b2c6a351c2bfa1ed1a55c181e296d40eb5 100644
--- a/src/createTRPCNext.tsx
+++ b/src/createTRPCNext.tsx
@@ -54,10 +54,13 @@ export type CreateTRPCNext<
 
 export function createTRPCNext<
   TRouter extends AnyRouter,
+  TServerSideContext = null,
   TSSRContext extends NextPageContext = NextPageContext,
   TFlags = null,
 >(
-  opts: WithTRPCNoSSROptions<TRouter> | WithTRPCSSROptions<TRouter>,
+  opts:
+    | WithTRPCNoSSROptions<TRouter, TServerSideContext, TSSRContext>
+    | WithTRPCSSROptions<TRouter, TServerSideContext, TSSRContext>,
 ): CreateTRPCNext<TRouter, TSSRContext, TFlags> {
   const hooks = createRootHooks<TRouter, TSSRContext>(opts);
 
diff --git a/src/withTRPC.tsx b/src/withTRPC.tsx
index 8b87c81b36344f125d5e76dfcec430b1064f766c..f8fda9546d67540b46d4965f5821026b85698129 100644
--- a/src/withTRPC.tsx
+++ b/src/withTRPC.tsx
@@ -62,29 +62,91 @@ export type WithTRPCConfig<TRouter extends AnyRouter> =
       abortOnUnmount?: boolean;
     };
 
-interface WithTRPCOptions<TRouter extends AnyRouter>
-  extends CreateTRPCReactOptions<TRouter> {
-  config: (info: { ctx?: NextPageContext }) => WithTRPCConfig<TRouter>;
+type AwaitPrepassRender<TSSRContext extends NextPageContext = NextPageContext> =
+  (opts: { queryClient: QueryClient; ctx: TSSRContext }) => Promise<boolean>;
+
+interface WithTRPCOptions<
+  TRouter extends AnyRouter,
+  TServerSideContext,
+  TSSRContext extends NextPageContext = NextPageContext,
+> extends CreateTRPCReactOptions<TRouter> {
+  config: (info: {
+    serverSideContext: TServerSideContext;
+    ctx?: NextPageContext;
+  }) => WithTRPCConfig<TRouter>;
+  awaitPrepassRender?: AwaitPrepassRender<TSSRContext>;
+}
+
+interface WithTRPCServerSideContextOptions<
+  TRouter extends AnyRouter,
+  TServerSideContext,
+  TSSRContext extends NextPageContext = NextPageContext,
+> extends WithTRPCOptions<TRouter, TServerSideContext, TSSRContext> {
+  serverSideContext?: (ctx: NextPageContext) => TServerSideContext;
 }
 
-export interface WithTRPCSSROptions<TRouter extends AnyRouter>
-  extends WithTRPCOptions<TRouter> {
+export interface WithTRPCSSROptions<
+  TRouter extends AnyRouter,
+  TServerSideContext,
+  TSSRContext extends NextPageContext = NextPageContext,
+> extends WithTRPCServerSideContextOptions<
+    TRouter,
+    TServerSideContext,
+    TSSRContext
+  > {
   ssr: true | ((opts: { ctx: NextPageContext }) => boolean | Promise<boolean>);
   responseMeta?: (opts: {
     ctx: NextPageContext;
     clientErrors: TRPCClientError<TRouter>[];
   }) => ResponseMeta;
 }
-export interface WithTRPCNoSSROptions<TRouter extends AnyRouter>
-  extends WithTRPCOptions<TRouter> {
+export interface WithTRPCNoSSROptions<
+  TRouter extends AnyRouter,
+  TServerSideContext,
+  TSSRContext extends NextPageContext = NextPageContext,
+> extends WithTRPCServerSideContextOptions<
+    TRouter,
+    TServerSideContext,
+    TSSRContext
+  > {
   ssr?: false;
 }
 
+export const waitUntilNoObservers = (queryClient: QueryClient) =>
+  new Promise<void>((resolve) => {
+    const unsub = queryClient.getQueryCache().subscribe((event) => {
+      if (event?.query.getObserversCount() === 0) {
+        resolve();
+        unsub();
+      }
+    });
+  });
+
+const awaitUntilResolved: AwaitPrepassRender = async ({
+  queryClient,
+}): Promise<boolean> => {
+  if (!queryClient.isFetching()) {
+    // the render didn't cause the queryClient to fetch anything
+    return true;
+  }
+  await waitUntilNoObservers(queryClient);
+  return false;
+};
+
 export function withTRPC<
   TRouter extends AnyRouter,
+  TServerSideContext = null,
   TSSRContext extends NextPageContext = NextPageContext,
->(opts: WithTRPCNoSSROptions<TRouter> | WithTRPCSSROptions<TRouter>) {
-  const { config: getClientConfig } = opts;
+>(
+  opts:
+    | WithTRPCNoSSROptions<TRouter, TServerSideContext, TSSRContext>
+    | WithTRPCSSROptions<TRouter, TServerSideContext, TSSRContext>,
+) {
+  const {
+    config: getClientConfig,
+    serverSideContext: getServerSideContext = () => null as TServerSideContext,
+    awaitPrepassRender = awaitUntilResolved,
+  } = opts;
 
   type TRPCPrepassProps = {
     config: WithTRPCConfig<TRouter>;
@@ -96,17 +158,19 @@ export function withTRPC<
   return (AppOrPage: NextComponentType<any, any, any>): NextComponentType => {
     const trpc = createRootHooks<TRouter, TSSRContext>(opts);
 
-    const WithTRPC = (
-      props: AppPropsType<NextRouter, any> & {
-        trpc?: TRPCPrepassProps;
-      },
-    ) => {
+    const WithTRPC = ({
+      serverSideContext,
+      ...props
+    }: AppPropsType<NextRouter, any> & {
+      trpc?: TRPCPrepassProps;
+      serverSideContext: TServerSideContext;
+    }) => {
       const [prepassProps] = useState(() => {
         if (props.trpc) {
           return props.trpc;
         }
 
-        const config = getClientConfig({});
+        const config = getClientConfig({ serverSideContext });
         const queryClient = getQueryClient(config);
         const trpcClient = trpc.createClient(config);
         return {
@@ -182,14 +246,15 @@ export function withTRPC<
             ...pageProps,
           };
         }
+        const serverSideContext = getServerSideContext(ctx);
         const getAppTreeProps = (props: Record<string, unknown>) =>
-          isApp ? { pageProps: props } : props;
+          isApp ? { pageProps: props, serverSideContext } : props;
 
         if (typeof window !== 'undefined' || !ssr) {
           return getAppTreeProps(pageProps);
         }
 
-        const config = getClientConfig({ ctx });
+        const config = getClientConfig({ serverSideContext, ctx });
         const trpcClient = createTRPCUntypedClient(config);
         const queryClient = getQueryClient(config);
 
@@ -210,20 +275,14 @@ export function withTRPC<
         while (true) {
           // render full tree
           await ssrPrepass(createElement(AppTree, prepassProps as any));
-          if (!queryClient.isFetching()) {
-            // the render didn't cause the queryClient to fetch anything
-            break;
-          }
-
           // wait until the query cache has settled it's promises
-          await new Promise<void>((resolve) => {
-            const unsub = queryClient.getQueryCache().subscribe((event) => {
-              if (event?.query.getObserversCount() === 0) {
-                resolve();
-                unsub();
-              }
-            });
+          const isResolved = await awaitPrepassRender({
+            queryClient,
+            ctx: ctx as TSSRContext,
           });
+          if (isResolved) {
+            break;
+          }
         }
         const dehydratedCache = dehydrate(queryClient, {
           shouldDehydrateQuery() {
