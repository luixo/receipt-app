# see https://github.com/vercel/next.js/discussions/11113#discussioncomment-7083801
diff --git a/dist/build/entries.js b/dist/build/entries.js
index c759abdd2419661dd658c0f6741eca30e8000042..ce25d5a6e4a098391ff86d019e4b58dd47f41448 100644
--- a/dist/build/entries.js
+++ b/dist/build/entries.js
@@ -177,7 +177,7 @@ function getPageFilePath({ absolutePagePath, pagesDir, appDir, rootDir }) {
     }
     return require.resolve(absolutePagePath);
 }
-function createPagesMapping({ isDev, pageExtensions, pagePaths, pagesType, pagesDir }) {
+function createPagesMapping({ isDev, pageExtensions, ignorePages, pagePaths, pagesType, pagesDir }) {
     const isAppRoute = pagesType === "app";
     const previousPages = {};
     const pages = pagePaths.reduce((result, pagePath)=>{
@@ -185,6 +185,10 @@ function createPagesMapping({ isDev, pageExtensions, pagePaths, pagesType, pages
         if (pagePath.endsWith(".d.ts") && pageExtensions.includes("ts")) {
             return result;
         }
+        const ignorePagesArray = Array.isArray(ignorePages) ? ignorePages : ignorePages ? [ignorePages] : [];
+        if (ignorePagesArray.some((regex) => new RegExp(regex).test(pagePath))) {
+            return result;
+        }
         let pageKey = getPageFromPath(pagePath, pageExtensions);
         if (isAppRoute) {
             pageKey = pageKey.replace(/%5F/g, "_");
diff --git a/dist/build/index.js b/dist/build/index.js
index 353eaa712e453b4b8185cf8b9bf799a36194c6fe..04ce0b11247dc691711643c2a641fbbe65d6aa03 100644
--- a/dist/build/index.js
+++ b/dist/build/index.js
@@ -329,6 +329,7 @@ async function build(dir, reactProductionProfiling = false, debugOutput = false,
             const mappedPages = nextBuildSpan.traceChild("create-pages-mapping").traceFn(()=>(0, _entries.createPagesMapping)({
                     isDev: false,
                     pageExtensions: config.pageExtensions,
+                    ignorePages: config.ignorePages,
                     pagesType: "pages",
                     pagePaths: pagesPaths,
                     pagesDir
diff --git a/dist/server/config-schema.js b/dist/server/config-schema.js
index dae2dec14daae7feb32329109104a54574783a30..f21da9c215e33f78e0cdd4e0bb34c094f3d2962a 100644
--- a/dist/server/config-schema.js
+++ b/dist/server/config-schema.js
@@ -407,6 +407,10 @@ const configSchema = _zod.z.lazy(()=>_zod.z.strictObject({
             "export"
         ]).optional(),
         outputFileTracing: _zod.z.boolean().optional(),
+        ignorePages: _zod.z.union([
+            _zod.z.string(),
+            _zod.z.array(_zod.z.string()).min(1)
+        ]).optional(),
         pageExtensions: _zod.z.array(_zod.z.string()).min(1).optional(),
         poweredByHeader: _zod.z.boolean().optional(),
         productionBrowserSourceMaps: _zod.z.boolean().optional(),
diff --git a/dist/server/config-shared.d.ts b/dist/server/config-shared.d.ts
index 2d93f521495a5c24478714a19d8089487d106b9b..21051445d0937006572701ea70277909e590b175 100644
--- a/dist/server/config-shared.d.ts
+++ b/dist/server/config-shared.d.ts
@@ -488,6 +488,11 @@ export interface NextConfig extends Record<string, any> {
      *
      */
     outputFileTracing?: boolean;
+    /**
+     * Regex that define pages to ignore while building
+     *
+     */
+    ignorePages?: string | string[];
     /**
      * Timeout after waiting to generate static pages in seconds
      *
diff --git a/dist/server/config.js b/dist/server/config.js
index 541fa7863a2017619bce7d11a40de9cd7f017310..fbde5170cd49c391e2003732d17810a4d6eb2006 100644
--- a/dist/server/config.js
+++ b/dist/server/config.js
@@ -234,6 +234,21 @@ function assignDefaults(dir, userConfig, silent) {
                 }
             });
         }
+        if (key === "ignorePages") {
+            if (Array.isArray(value)) {
+                if (!value.length) {
+                    throw new Error(`Specified ignorePages is an empty array. Please update it with the relevant strings or remove it.`);
+                }
+                value.forEach((element)=>{
+                    if (typeof element !== 'string') {
+                        throw new Error(`Specified ignorePages is not an array of string, found "${element}" of type "${typeof element}". Please update this config or remove it.`);
+                    }
+                });
+            } else if (typeof value !== 'string') {
+                throw new Error(`Specified ignorePages is neither an array nor a string, found "${value}" of type "${typeof value}". Please update this config or remove it.`);
+            }
+            
+        }
         if (!!value && value.constructor === Object) {
             currentConfig[key] = {
                 ..._configshared.defaultConfig[key],
